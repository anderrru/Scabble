Index: src/Model/GameBoard.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Model;\n\npublic class GameBoard {\n\tprivate Tile[][] board;\n\t\n\tpublic GameBoard() {\n\t\tboard = new Tile[15][15];\n\t}\n\t\n\tpublic Tile getTile(int i, int j) {\n\t\treturn board[i][j];\n\t}\n\t\n\tpublic void placeGamePiece(int i, int j) {\n\t\tTile tile = getTile(i,j);\n\t\tif (tile.isEmpty()) {\n\t\t\t// TODO implement helper functions that checks if placement i, j is valid\n\t\t}\n\t}\n\n\tpublic boolean checkValidMove() {\n\t\t// TODO check if move is valid\n\t}\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Model/GameBoard.java b/src/Model/GameBoard.java
--- a/src/Model/GameBoard.java	(revision 5a076c50632c7b85a51097899cb68aed2a06925e)
+++ b/src/Model/GameBoard.java	(date 1744661109408)
@@ -20,5 +20,6 @@
 
 	public boolean checkValidMove() {
 		// TODO check if move is valid
+		return false;
 	}
 }
Index: Scrabble.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Scrabble.iml b/Scrabble.iml
new file mode 100644
--- /dev/null	(date 1744661109407)
+++ b/Scrabble.iml	(date 1744661109407)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <output url="file://$MODULE_DIR$/bin" />
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
+    </content>
+    <orderEntry type="jdk" jdkName="JavaSE-22" jdkType="JavaSDK" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1744661109407)
+++ b/.idea/modules.xml	(date 1744661109407)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/Scrabble.iml" filepath="$PROJECT_DIR$/Scrabble.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: ../Sim5/src/ID_EX.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Sim5/src/ID_EX.java b/../Sim5/src/ID_EX.java
new file mode 100644
--- /dev/null	(date 1744661109408)
+++ b/../Sim5/src/ID_EX.java	(date 1744661109408)
@@ -0,0 +1,46 @@
+// ID_EX.java
+public class ID_EX {
+    public int rs, rt, rd;
+    public int rsVal, rtVal;
+    public int imm16, imm32;
+    public int ALUsrc;
+    public ALUControl ALU;
+    public int memRead;
+    public int memWrite;
+    public int memToReg;
+    public int regDst;
+    public int regWrite;
+    public int extra1, extra2, extra3;
+
+    // Constructor to initialize fields
+    public ID_EX() {
+        rs = 0;
+        rt = 0;
+        rd = 0;
+        rsVal = 0;
+        rtVal = 0;
+        imm16 = 0;
+        imm32 = 0;
+        ALUsrc = 0;
+        ALU = new ALUControl(); // Initialize ALUControl object
+        memRead = 0;
+        memWrite = 0;
+        memToReg = 0;
+        regDst = 0;
+        regWrite = 0;
+        extra1 = 0;
+        extra2 = 0;
+        extra3 = 0;
+    }
+
+    public static class ALUControl {
+        public int bNegate;
+        public int op;
+
+        // Constructor to initialize ALUControl fields
+        public ALUControl() {
+            bNegate = 0;
+            op = 0;
+        }
+    }
+}
\ No newline at end of file
Index: ../Sim5/src/Test11Syscalls.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Sim5/src/Test11Syscalls.java b/../Sim5/src/Test11Syscalls.java
new file mode 100644
--- /dev/null	(date 1744661109408)
+++ b/../Sim5/src/Test11Syscalls.java	(date 1744661109408)
@@ -0,0 +1,73 @@
+// Test11Syscalls.java
+public class Test11Syscalls {
+    public static void main(String[] args) {
+        final int CODE_SIZE = 16 * 1024;
+        final int DATA_SIZE = 16 * 1024;
+        int[] regs = new int[34];
+        int[] instMemory = new int[CODE_SIZE];
+        int[] dataMemory = new int[DATA_SIZE];
+
+        // Initialize registers and data memory
+        for (int i = 0; i < 34; i++) {
+            regs[i] = 0x01010101 * i;
+        }
+        for (int i = 0; i < dataMemory.length; i++) {
+            dataMemory[i] = 0xffff0000 + i * 4;
+        }
+
+        // Set up the instruction sequence
+        // print_int(1234) - twice
+        instMemory[0] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 1);
+        instMemory[1] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.REG_ZERO(), 1234);
+        instMemory[2] = Sim5TestCommonCode.NOP();
+        instMemory[3] = Sim5TestCommonCode.NOP();
+        instMemory[4] = Sim5TestCommonCode.SYSCALL();
+        instMemory[5] = Sim5TestCommonCode.SYSCALL();
+
+        // print_int(5678)
+        instMemory[6] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 1);
+        instMemory[7] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.REG_ZERO(), 5678);
+        instMemory[8] = Sim5TestCommonCode.NOP();
+        instMemory[9] = Sim5TestCommonCode.NOP();
+        instMemory[10] = Sim5TestCommonCode.SYSCALL();
+
+        // print_char('\n')
+        instMemory[11] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 11);
+        instMemory[12] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.REG_ZERO(), 0xa);
+        instMemory[13] = Sim5TestCommonCode.NOP();
+        instMemory[14] = Sim5TestCommonCode.NOP();
+        instMemory[15] = Sim5TestCommonCode.SYSCALL();
+
+        // print_str("TEST STRING\n")
+        instMemory[16] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 4);
+        instMemory[17] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.REG_ZERO(), 0x1000);
+        instMemory[18] = Sim5TestCommonCode.NOP();
+        instMemory[19] = Sim5TestCommonCode.NOP();
+        instMemory[20] = Sim5TestCommonCode.SYSCALL();
+
+        // sys_exit
+        instMemory[21] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 10);
+        instMemory[22] = Sim5TestCommonCode.NOP();
+        instMemory[23] = Sim5TestCommonCode.NOP();
+        instMemory[24] = Sim5TestCommonCode.SYSCALL();
+
+        // Set up the string in data memory
+        dataMemory[0x400] = charsToWord('T', 'E', 'S', 'T');
+        dataMemory[0x401] = charsToWord(' ', 'S', 'T', 'R');
+        dataMemory[0x402] = charsToWord('I', 'N', 'G', '\n');
+        dataMemory[0x403] = charsToWord('\0', '\0', '\0', '\0');
+
+        int codeOffset = 0x447a5d34;
+        Sim5TestCommonCode.ExecProcessor(instMemory, CODE_SIZE,
+                regs,
+                dataMemory, DATA_SIZE,
+                codeOffset);
+    }
+
+    private static int charsToWord(char a, char b, char c, char d) {
+        return ((d & 0xff) << 24) |
+               ((c & 0xff) << 16) |
+               ((b & 0xff) << 8) |
+               (a & 0xff);
+    }
+}
\ No newline at end of file
Index: ../Sim5/src/Test13MultipleInstructions1NoDebug.out
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Sim5/src/Test13MultipleInstructions1NoDebug.out b/../Sim5/src/Test13MultipleInstructions1NoDebug.out
new file mode 100644
--- /dev/null	(date 1744661109409)
+++ b/../Sim5/src/Test13MultipleInstructions1NoDebug.out	(date 1744661109409)
@@ -0,0 +1,6 @@
+13
+16
+19
+22
+25
+--- syscall 10 executed: Normal termination of the assembly language program.
Index: ../Sim5/src/EX_MEM.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Sim5/src/EX_MEM.java b/../Sim5/src/EX_MEM.java
new file mode 100644
--- /dev/null	(date 1744661109408)
+++ b/../Sim5/src/EX_MEM.java	(date 1744661109408)
@@ -0,0 +1,25 @@
+// EX_MEM.java
+public class EX_MEM {
+    public int rt;
+    public int rtVal;
+    public int memRead, memWrite, memToReg;
+    public int writeReg;
+    public int regWrite;
+    public int aluResult;
+    public int extra1, extra2, extra3;
+
+    // Constructor to initialize fields
+    public EX_MEM() {
+        rt = 0;
+        rtVal = 0;
+        memRead = 0;
+        memWrite = 0;
+        memToReg = 0;
+        writeReg = 0;
+        regWrite = 0;
+        aluResult = 0;
+        extra1 = 0;
+        extra2 = 0;
+        extra3 = 0;
+    }
+}
\ No newline at end of file
Index: ../Sim5/src/Test14LUI.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Sim5/src/Test14LUI.java b/../Sim5/src/Test14LUI.java
new file mode 100644
--- /dev/null	(date 1744661109409)
+++ b/../Sim5/src/Test14LUI.java	(date 1744661109409)
@@ -0,0 +1,157 @@
+public class Test14LUI {
+    public static void main(String[] args) {
+        final int CODE_SIZE = 16 * 1024;
+        final int DATA_SIZE = 16 * 1024;
+        int[] regs = new int[34];
+        int[] instMemory = new int[CODE_SIZE];
+        int[] dataMemory = new int[DATA_SIZE];
+
+        // Initialize registers and data memory
+        for (int i = 0; i < 34; i++) {
+            regs[i] = 0x01010101 * i;
+        }
+        for (int i = 0; i < dataMemory.length; i++) {
+            dataMemory[i] = 0xffff0000 + (i * 4);
+        }
+
+        int codeOffset = 0x12340000;
+
+        // Initialize instructions
+        // init
+        instMemory[0] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.T_REG(0), Sim5TestCommonCode.REG_ZERO(), 1234);
+        instMemory[1] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.T_REG(1), Sim5TestCommonCode.REG_ZERO(), 5678);
+        instMemory[2] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.T_REG(2), Sim5TestCommonCode.REG_ZERO(), 1111);
+        instMemory[3] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.T_REG(3), Sim5TestCommonCode.REG_ZERO(), 2222);
+
+        // LUI instruction tests
+        instMemory[4] = Sim5TestCommonCode.LUI(Sim5TestCommonCode.S_REG(0), 1);
+        instMemory[5] = Sim5TestCommonCode.LUI(Sim5TestCommonCode.S_REG(1), 17);
+        instMemory[6] = Sim5TestCommonCode.LUI(Sim5TestCommonCode.S_REG(2), 1000);
+        instMemory[7] = Sim5TestCommonCode.LUI(Sim5TestCommonCode.S_REG(3), 1234);
+
+        // Print t0-t3 and s0-s3 values with newlines
+        // print_int(t0)
+        instMemory[8] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 1);
+        instMemory[9] = Sim5TestCommonCode.ADD(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.T_REG(0), Sim5TestCommonCode.REG_ZERO());
+        instMemory[10] = Sim5TestCommonCode.NOP();
+        instMemory[11] = Sim5TestCommonCode.NOP();
+        instMemory[12] = Sim5TestCommonCode.SYSCALL();
+
+        // print_char('\n')
+        instMemory[13] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 11);
+        instMemory[14] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.REG_ZERO(), 0xa);
+        instMemory[15] = Sim5TestCommonCode.NOP();
+        instMemory[16] = Sim5TestCommonCode.NOP();
+        instMemory[17] = Sim5TestCommonCode.SYSCALL();
+
+        // print_int(t1)
+        instMemory[18] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 1);
+        instMemory[19] = Sim5TestCommonCode.ADD(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.T_REG(1), Sim5TestCommonCode.REG_ZERO());
+        instMemory[20] = Sim5TestCommonCode.NOP();
+        instMemory[21] = Sim5TestCommonCode.NOP();
+        instMemory[22] = Sim5TestCommonCode.SYSCALL();
+
+        // print_char('\n')
+        instMemory[23] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 11);
+        instMemory[24] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.REG_ZERO(), 0xa);
+        instMemory[25] = Sim5TestCommonCode.NOP();
+        instMemory[26] = Sim5TestCommonCode.NOP();
+        instMemory[27] = Sim5TestCommonCode.SYSCALL();
+
+        // print_int(t2)
+        instMemory[28] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 1);
+        instMemory[29] = Sim5TestCommonCode.ADD(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.T_REG(2), Sim5TestCommonCode.REG_ZERO());
+        instMemory[30] = Sim5TestCommonCode.NOP();
+        instMemory[31] = Sim5TestCommonCode.NOP();
+        instMemory[32] = Sim5TestCommonCode.SYSCALL();
+
+        // print_char('\n')
+        instMemory[33] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 11);
+        instMemory[34] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.REG_ZERO(), 0xa);
+        instMemory[35] = Sim5TestCommonCode.NOP();
+        instMemory[36] = Sim5TestCommonCode.NOP();
+        instMemory[37] = Sim5TestCommonCode.SYSCALL();
+
+        // print_int(t3)
+        instMemory[38] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 1);
+        instMemory[39] = Sim5TestCommonCode.ADD(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.T_REG(3), Sim5TestCommonCode.REG_ZERO());
+        instMemory[40] = Sim5TestCommonCode.NOP();
+        instMemory[41] = Sim5TestCommonCode.NOP();
+        instMemory[42] = Sim5TestCommonCode.SYSCALL();
+
+        // print_char('\n')
+        instMemory[43] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 11);
+        instMemory[44] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.REG_ZERO(), 0xa);
+        instMemory[45] = Sim5TestCommonCode.NOP();
+        instMemory[46] = Sim5TestCommonCode.NOP();
+        instMemory[47] = Sim5TestCommonCode.SYSCALL();
+
+        // print_int(s0)
+        instMemory[48] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 1);
+        instMemory[49] = Sim5TestCommonCode.ADD(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.S_REG(0), Sim5TestCommonCode.REG_ZERO());
+        instMemory[50] = Sim5TestCommonCode.NOP();
+        instMemory[51] = Sim5TestCommonCode.NOP();
+        instMemory[52] = Sim5TestCommonCode.SYSCALL();
+
+        // print_char('\n')
+        instMemory[53] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 11);
+        instMemory[54] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.REG_ZERO(), 0xa);
+        instMemory[55] = Sim5TestCommonCode.NOP();
+        instMemory[56] = Sim5TestCommonCode.NOP();
+        instMemory[57] = Sim5TestCommonCode.SYSCALL();
+
+        // print_int(s1)
+        instMemory[58] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 1);
+        instMemory[59] = Sim5TestCommonCode.ADD(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.S_REG(1), Sim5TestCommonCode.REG_ZERO());
+        instMemory[60] = Sim5TestCommonCode.NOP();
+        instMemory[61] = Sim5TestCommonCode.NOP();
+        instMemory[62] = Sim5TestCommonCode.SYSCALL();
+
+        // print_char('\n')
+        instMemory[63] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 11);
+        instMemory[64] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.REG_ZERO(), 0xa);
+        instMemory[65] = Sim5TestCommonCode.NOP();
+        instMemory[66] = Sim5TestCommonCode.NOP();
+        instMemory[67] = Sim5TestCommonCode.SYSCALL();
+
+        // print_int(s2)
+        instMemory[68] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 1);
+        instMemory[69] = Sim5TestCommonCode.ADD(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.S_REG(2), Sim5TestCommonCode.REG_ZERO());
+        instMemory[70] = Sim5TestCommonCode.NOP();
+        instMemory[71] = Sim5TestCommonCode.NOP();
+        instMemory[72] = Sim5TestCommonCode.SYSCALL();
+
+        // print_char('\n')
+        instMemory[73] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 11);
+        instMemory[74] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.REG_ZERO(), 0xa);
+        instMemory[75] = Sim5TestCommonCode.NOP();
+        instMemory[76] = Sim5TestCommonCode.NOP();
+        instMemory[77] = Sim5TestCommonCode.SYSCALL();
+
+        // print_int(s3)
+        instMemory[78] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 1);
+        instMemory[79] = Sim5TestCommonCode.ADD(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.S_REG(3), Sim5TestCommonCode.REG_ZERO());
+        instMemory[80] = Sim5TestCommonCode.NOP();
+        instMemory[81] = Sim5TestCommonCode.NOP();
+        instMemory[82] = Sim5TestCommonCode.SYSCALL();
+
+        // print_char('\n')
+        instMemory[83] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 11);
+        instMemory[84] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.REG_ZERO(), 0xa);
+        instMemory[85] = Sim5TestCommonCode.NOP();
+        instMemory[86] = Sim5TestCommonCode.NOP();
+        instMemory[87] = Sim5TestCommonCode.SYSCALL();
+
+        // exit()
+        instMemory[88] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 10);
+        instMemory[89] = Sim5TestCommonCode.NOP();
+        instMemory[90] = Sim5TestCommonCode.NOP();
+        instMemory[91] = Sim5TestCommonCode.SYSCALL();
+
+        // Run the processor simulation
+        Sim5TestCommonCode.ExecProcessor(instMemory, CODE_SIZE,
+                regs,
+                dataMemory, DATA_SIZE,
+                codeOffset);
+    }
+}
\ No newline at end of file
Index: ../Sim5/src/Test16NOR.out
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Sim5/src/Test16NOR.out b/../Sim5/src/Test16NOR.out
new file mode 100644
--- /dev/null	(date 1744661109409)
+++ b/../Sim5/src/Test16NOR.out	(date 1744661109409)
@@ -0,0 +1,9 @@
+1234
+5678
+1111
+2222
+-5887
+-3328
+-5760
+-3327
+--- syscall 10 executed: Normal termination of the assembly language program.
Index: ../Sim5/src/Test17IDWithSWStallCheck.out
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Sim5/src/Test17IDWithSWStallCheck.out b/../Sim5/src/Test17IDWithSWStallCheck.out
new file mode 100644
--- /dev/null	(date 1744661109410)
+++ b/../Sim5/src/Test17IDWithSWStallCheck.out	(date 1744661109410)
@@ -0,0 +1,6081 @@
++-------------------------------------------+
+| STARTING TEST i=0 j=0
++-------------------------------------------+
+  instruction A: 0x02328020
+  instruction B: 0x02328020
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 18
+  ID_EX.rd       = 16
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 16
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x02328020 b=0x02328020 sw1=0xac100070
+        stall? 0
+Test 2 (match B): a=0x02328020 b=0x02328020 sw2=0xac100074
+        stall? 0
+Test 3 (SW zero): a=0x02328020 b=0x02328020 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=0 j=1
++-------------------------------------------+
+  instruction A: 0x02328020
+  instruction B: 0x02959822
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 21
+  ID_EX.rd       = 19
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 16
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x02328020 b=0x02959822 sw1=0xac100070
+        stall? 1
+Test 2 (match B): a=0x02328020 b=0x02959822 sw2=0xac130074
+        stall? 0
+Test 3 (SW zero): a=0x02328020 b=0x02959822 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=0 j=2
++-------------------------------------------+
+  instruction A: 0x02328020
+  instruction B: 0x216affff
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 10
+  ID_EX.rd       = 31
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 16
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x02328020 b=0x216affff sw1=0xac100070
+        stall? 1
+Test 2 (match B): a=0x02328020 b=0x216affff sw2=0xac0a0074
+        stall? 0
+Test 3 (SW zero): a=0x02328020 b=0x216affff sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=0 j=3
++-------------------------------------------+
+  instruction A: 0x02328020
+  instruction B: 0x21ac0010
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 12
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 16
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x02328020 b=0x21ac0010 sw1=0xac100070
+        stall? 1
+Test 2 (match B): a=0x02328020 b=0x21ac0010 sw2=0xac0c0074
+        stall? 0
+Test 3 (SW zero): a=0x02328020 b=0x21ac0010 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=0 j=4
++-------------------------------------------+
+  instruction A: 0x02328020
+  instruction B: 0x00020821
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 2
+  ID_EX.rd       = 1
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 16
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x02328020 b=0x00020821 sw1=0xac100070
+        stall? 1
+Test 2 (match B): a=0x02328020 b=0x00020821 sw2=0xac010074
+        stall? 0
+Test 3 (SW zero): a=0x02328020 b=0x00020821 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=0 j=5
++-------------------------------------------+
+  instruction A: 0x02328020
+  instruction B: 0x00851823
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 5
+  ID_EX.rd       = 3
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 16
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x02328020 b=0x00851823 sw1=0xac100070
+        stall? 1
+Test 2 (match B): a=0x02328020 b=0x00851823 sw2=0xac030074
+        stall? 0
+Test 3 (SW zero): a=0x02328020 b=0x00851823 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=0 j=6
++-------------------------------------------+
+  instruction A: 0x02328020
+  instruction B: 0x24e61234
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 6
+  ID_EX.rd       = 2
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 16
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x02328020 b=0x24e61234 sw1=0xac100070
+        stall? 1
+Test 2 (match B): a=0x02328020 b=0x24e61234 sw2=0xac060074
+        stall? 0
+Test 3 (SW zero): a=0x02328020 b=0x24e61234 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=0 j=7
++-------------------------------------------+
+  instruction A: 0x02328020
+  instruction B: 0x014b4824
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 11
+  ID_EX.rd       = 9
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 16
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x02328020 b=0x014b4824 sw1=0xac100070
+        stall? 1
+Test 2 (match B): a=0x02328020 b=0x014b4824 sw2=0xac090074
+        stall? 0
+Test 3 (SW zero): a=0x02328020 b=0x014b4824 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=0 j=8
++-------------------------------------------+
+  instruction A: 0x02328020
+  instruction B: 0x01ae6025
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 14
+  ID_EX.rd       = 12
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 16
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x02328020 b=0x01ae6025 sw1=0xac100070
+        stall? 1
+Test 2 (match B): a=0x02328020 b=0x01ae6025 sw2=0xac0c0074
+        stall? 0
+Test 3 (SW zero): a=0x02328020 b=0x01ae6025 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=0 j=9
++-------------------------------------------+
+  instruction A: 0x02328020
+  instruction B: 0x320f5678
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 15
+  ID_EX.rd       = 10
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 16
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x02328020 b=0x320f5678 sw1=0xac100070
+        stall? 1
+Test 2 (match B): a=0x02328020 b=0x320f5678 sw2=0xac0f0074
+        stall? 0
+Test 3 (SW zero): a=0x02328020 b=0x320f5678 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=0 j=10
++-------------------------------------------+
+  instruction A: 0x02328020
+  instruction B: 0x36729abc
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 18
+  ID_EX.rd       = 19
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 16
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x02328020 b=0x36729abc sw1=0xac100070
+        stall? 1
+Test 2 (match B): a=0x02328020 b=0x36729abc sw2=0xac120074
+        stall? 0
+Test 3 (SW zero): a=0x02328020 b=0x36729abc sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=0 j=11
++-------------------------------------------+
+  instruction A: 0x02328020
+  instruction B: 0x02d7a82a
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 23
+  ID_EX.rd       = 21
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 16
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x02328020 b=0x02d7a82a sw1=0xac100070
+        stall? 1
+Test 2 (match B): a=0x02328020 b=0x02d7a82a sw2=0xac150074
+        stall? 0
+Test 3 (SW zero): a=0x02328020 b=0x02d7a82a sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=0 j=12
++-------------------------------------------+
+  instruction A: 0x02328020
+  instruction B: 0x2b38ffff
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 24
+  ID_EX.rd       = 31
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 16
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x02328020 b=0x2b38ffff sw1=0xac100070
+        stall? 1
+Test 2 (match B): a=0x02328020 b=0x2b38ffff sw2=0xac180074
+        stall? 0
+Test 3 (SW zero): a=0x02328020 b=0x2b38ffff sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=0 j=13
++-------------------------------------------+
+  instruction A: 0x02328020
+  instruction B: 0x8c1a0068
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 26
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 16
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x02328020 b=0x8c1a0068 sw1=0xac100070
+        stall? 1
+Test 2 (match B): a=0x02328020 b=0x8c1a0068 sw2=0xac1a0074
+        stall? 0
+Test 3 (SW zero): a=0x02328020 b=0x8c1a0068 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=0 j=14
++-------------------------------------------+
+  instruction A: 0x02328020
+  instruction B: 0xac1d006c
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 0
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 29
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 16
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x02328020 b=0xac1d006c sw1=0xac100070
+        stall? 1
+Test 2 (match B): a=0x02328020 b=0xac1d006c sw2=0xac1d0074
+        stall? 0
+Test 3 (SW zero): a=0x02328020 b=0xac1d006c sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=0 j=15
++-------------------------------------------+
+  instruction A: 0x02328020
+  instruction B: 0x00000000
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 0
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 16
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x02328020 b=0x00000000 sw1=0xac100070
+        stall? 1
+Skipping Test 2 for this instruction combination, because B appears to "write" to register zero.
+Skipping Test 3 for this instruction combination, because either A or B appear to "write" to register zero.
+
++-------------------------------------------+
+| STARTING TEST i=1 j=0
++-------------------------------------------+
+  instruction A: 0x02959822
+  instruction B: 0x02328020
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 18
+  ID_EX.rd       = 16
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 19
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x02959822 b=0x02328020 sw1=0xac130070
+        stall? 1
+Test 2 (match B): a=0x02959822 b=0x02328020 sw2=0xac100074
+        stall? 0
+Test 3 (SW zero): a=0x02959822 b=0x02328020 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=1 j=1
++-------------------------------------------+
+  instruction A: 0x02959822
+  instruction B: 0x02959822
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 21
+  ID_EX.rd       = 19
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 19
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x02959822 b=0x02959822 sw1=0xac130070
+        stall? 0
+Test 2 (match B): a=0x02959822 b=0x02959822 sw2=0xac130074
+        stall? 0
+Test 3 (SW zero): a=0x02959822 b=0x02959822 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=1 j=2
++-------------------------------------------+
+  instruction A: 0x02959822
+  instruction B: 0x216affff
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 10
+  ID_EX.rd       = 31
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 19
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x02959822 b=0x216affff sw1=0xac130070
+        stall? 1
+Test 2 (match B): a=0x02959822 b=0x216affff sw2=0xac0a0074
+        stall? 0
+Test 3 (SW zero): a=0x02959822 b=0x216affff sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=1 j=3
++-------------------------------------------+
+  instruction A: 0x02959822
+  instruction B: 0x21ac0010
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 12
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 19
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x02959822 b=0x21ac0010 sw1=0xac130070
+        stall? 1
+Test 2 (match B): a=0x02959822 b=0x21ac0010 sw2=0xac0c0074
+        stall? 0
+Test 3 (SW zero): a=0x02959822 b=0x21ac0010 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=1 j=4
++-------------------------------------------+
+  instruction A: 0x02959822
+  instruction B: 0x00020821
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 2
+  ID_EX.rd       = 1
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 19
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x02959822 b=0x00020821 sw1=0xac130070
+        stall? 1
+Test 2 (match B): a=0x02959822 b=0x00020821 sw2=0xac010074
+        stall? 0
+Test 3 (SW zero): a=0x02959822 b=0x00020821 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=1 j=5
++-------------------------------------------+
+  instruction A: 0x02959822
+  instruction B: 0x00851823
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 5
+  ID_EX.rd       = 3
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 19
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x02959822 b=0x00851823 sw1=0xac130070
+        stall? 1
+Test 2 (match B): a=0x02959822 b=0x00851823 sw2=0xac030074
+        stall? 0
+Test 3 (SW zero): a=0x02959822 b=0x00851823 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=1 j=6
++-------------------------------------------+
+  instruction A: 0x02959822
+  instruction B: 0x24e61234
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 6
+  ID_EX.rd       = 2
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 19
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x02959822 b=0x24e61234 sw1=0xac130070
+        stall? 1
+Test 2 (match B): a=0x02959822 b=0x24e61234 sw2=0xac060074
+        stall? 0
+Test 3 (SW zero): a=0x02959822 b=0x24e61234 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=1 j=7
++-------------------------------------------+
+  instruction A: 0x02959822
+  instruction B: 0x014b4824
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 11
+  ID_EX.rd       = 9
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 19
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x02959822 b=0x014b4824 sw1=0xac130070
+        stall? 1
+Test 2 (match B): a=0x02959822 b=0x014b4824 sw2=0xac090074
+        stall? 0
+Test 3 (SW zero): a=0x02959822 b=0x014b4824 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=1 j=8
++-------------------------------------------+
+  instruction A: 0x02959822
+  instruction B: 0x01ae6025
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 14
+  ID_EX.rd       = 12
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 19
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x02959822 b=0x01ae6025 sw1=0xac130070
+        stall? 1
+Test 2 (match B): a=0x02959822 b=0x01ae6025 sw2=0xac0c0074
+        stall? 0
+Test 3 (SW zero): a=0x02959822 b=0x01ae6025 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=1 j=9
++-------------------------------------------+
+  instruction A: 0x02959822
+  instruction B: 0x320f5678
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 15
+  ID_EX.rd       = 10
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 19
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x02959822 b=0x320f5678 sw1=0xac130070
+        stall? 1
+Test 2 (match B): a=0x02959822 b=0x320f5678 sw2=0xac0f0074
+        stall? 0
+Test 3 (SW zero): a=0x02959822 b=0x320f5678 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=1 j=10
++-------------------------------------------+
+  instruction A: 0x02959822
+  instruction B: 0x36729abc
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 18
+  ID_EX.rd       = 19
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 19
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x02959822 b=0x36729abc sw1=0xac130070
+        stall? 1
+Test 2 (match B): a=0x02959822 b=0x36729abc sw2=0xac120074
+        stall? 0
+Test 3 (SW zero): a=0x02959822 b=0x36729abc sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=1 j=11
++-------------------------------------------+
+  instruction A: 0x02959822
+  instruction B: 0x02d7a82a
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 23
+  ID_EX.rd       = 21
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 19
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x02959822 b=0x02d7a82a sw1=0xac130070
+        stall? 1
+Test 2 (match B): a=0x02959822 b=0x02d7a82a sw2=0xac150074
+        stall? 0
+Test 3 (SW zero): a=0x02959822 b=0x02d7a82a sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=1 j=12
++-------------------------------------------+
+  instruction A: 0x02959822
+  instruction B: 0x2b38ffff
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 24
+  ID_EX.rd       = 31
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 19
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x02959822 b=0x2b38ffff sw1=0xac130070
+        stall? 1
+Test 2 (match B): a=0x02959822 b=0x2b38ffff sw2=0xac180074
+        stall? 0
+Test 3 (SW zero): a=0x02959822 b=0x2b38ffff sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=1 j=13
++-------------------------------------------+
+  instruction A: 0x02959822
+  instruction B: 0x8c1a0068
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 26
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 19
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x02959822 b=0x8c1a0068 sw1=0xac130070
+        stall? 1
+Test 2 (match B): a=0x02959822 b=0x8c1a0068 sw2=0xac1a0074
+        stall? 0
+Test 3 (SW zero): a=0x02959822 b=0x8c1a0068 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=1 j=14
++-------------------------------------------+
+  instruction A: 0x02959822
+  instruction B: 0xac1d006c
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 0
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 29
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 19
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x02959822 b=0xac1d006c sw1=0xac130070
+        stall? 1
+Test 2 (match B): a=0x02959822 b=0xac1d006c sw2=0xac1d0074
+        stall? 0
+Test 3 (SW zero): a=0x02959822 b=0xac1d006c sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=1 j=15
++-------------------------------------------+
+  instruction A: 0x02959822
+  instruction B: 0x00000000
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 0
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 19
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x02959822 b=0x00000000 sw1=0xac130070
+        stall? 1
+Skipping Test 2 for this instruction combination, because B appears to "write" to register zero.
+Skipping Test 3 for this instruction combination, because either A or B appear to "write" to register zero.
+
++-------------------------------------------+
+| STARTING TEST i=2 j=0
++-------------------------------------------+
+  instruction A: 0x216affff
+  instruction B: 0x02328020
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 18
+  ID_EX.rd       = 16
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 10
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x216affff b=0x02328020 sw1=0xac0a0070
+        stall? 1
+Test 2 (match B): a=0x216affff b=0x02328020 sw2=0xac100074
+        stall? 0
+Test 3 (SW zero): a=0x216affff b=0x02328020 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=2 j=1
++-------------------------------------------+
+  instruction A: 0x216affff
+  instruction B: 0x02959822
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 21
+  ID_EX.rd       = 19
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 10
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x216affff b=0x02959822 sw1=0xac0a0070
+        stall? 1
+Test 2 (match B): a=0x216affff b=0x02959822 sw2=0xac130074
+        stall? 0
+Test 3 (SW zero): a=0x216affff b=0x02959822 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=2 j=2
++-------------------------------------------+
+  instruction A: 0x216affff
+  instruction B: 0x216affff
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 10
+  ID_EX.rd       = 31
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 10
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x216affff b=0x216affff sw1=0xac0a0070
+        stall? 0
+Test 2 (match B): a=0x216affff b=0x216affff sw2=0xac0a0074
+        stall? 0
+Test 3 (SW zero): a=0x216affff b=0x216affff sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=2 j=3
++-------------------------------------------+
+  instruction A: 0x216affff
+  instruction B: 0x21ac0010
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 12
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 10
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x216affff b=0x21ac0010 sw1=0xac0a0070
+        stall? 1
+Test 2 (match B): a=0x216affff b=0x21ac0010 sw2=0xac0c0074
+        stall? 0
+Test 3 (SW zero): a=0x216affff b=0x21ac0010 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=2 j=4
++-------------------------------------------+
+  instruction A: 0x216affff
+  instruction B: 0x00020821
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 2
+  ID_EX.rd       = 1
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 10
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x216affff b=0x00020821 sw1=0xac0a0070
+        stall? 1
+Test 2 (match B): a=0x216affff b=0x00020821 sw2=0xac010074
+        stall? 0
+Test 3 (SW zero): a=0x216affff b=0x00020821 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=2 j=5
++-------------------------------------------+
+  instruction A: 0x216affff
+  instruction B: 0x00851823
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 5
+  ID_EX.rd       = 3
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 10
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x216affff b=0x00851823 sw1=0xac0a0070
+        stall? 1
+Test 2 (match B): a=0x216affff b=0x00851823 sw2=0xac030074
+        stall? 0
+Test 3 (SW zero): a=0x216affff b=0x00851823 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=2 j=6
++-------------------------------------------+
+  instruction A: 0x216affff
+  instruction B: 0x24e61234
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 6
+  ID_EX.rd       = 2
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 10
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x216affff b=0x24e61234 sw1=0xac0a0070
+        stall? 1
+Test 2 (match B): a=0x216affff b=0x24e61234 sw2=0xac060074
+        stall? 0
+Test 3 (SW zero): a=0x216affff b=0x24e61234 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=2 j=7
++-------------------------------------------+
+  instruction A: 0x216affff
+  instruction B: 0x014b4824
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 11
+  ID_EX.rd       = 9
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 10
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x216affff b=0x014b4824 sw1=0xac0a0070
+        stall? 1
+Test 2 (match B): a=0x216affff b=0x014b4824 sw2=0xac090074
+        stall? 0
+Test 3 (SW zero): a=0x216affff b=0x014b4824 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=2 j=8
++-------------------------------------------+
+  instruction A: 0x216affff
+  instruction B: 0x01ae6025
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 14
+  ID_EX.rd       = 12
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 10
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x216affff b=0x01ae6025 sw1=0xac0a0070
+        stall? 1
+Test 2 (match B): a=0x216affff b=0x01ae6025 sw2=0xac0c0074
+        stall? 0
+Test 3 (SW zero): a=0x216affff b=0x01ae6025 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=2 j=9
++-------------------------------------------+
+  instruction A: 0x216affff
+  instruction B: 0x320f5678
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 15
+  ID_EX.rd       = 10
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 10
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x216affff b=0x320f5678 sw1=0xac0a0070
+        stall? 1
+Test 2 (match B): a=0x216affff b=0x320f5678 sw2=0xac0f0074
+        stall? 0
+Test 3 (SW zero): a=0x216affff b=0x320f5678 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=2 j=10
++-------------------------------------------+
+  instruction A: 0x216affff
+  instruction B: 0x36729abc
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 18
+  ID_EX.rd       = 19
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 10
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x216affff b=0x36729abc sw1=0xac0a0070
+        stall? 1
+Test 2 (match B): a=0x216affff b=0x36729abc sw2=0xac120074
+        stall? 0
+Test 3 (SW zero): a=0x216affff b=0x36729abc sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=2 j=11
++-------------------------------------------+
+  instruction A: 0x216affff
+  instruction B: 0x02d7a82a
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 23
+  ID_EX.rd       = 21
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 10
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x216affff b=0x02d7a82a sw1=0xac0a0070
+        stall? 1
+Test 2 (match B): a=0x216affff b=0x02d7a82a sw2=0xac150074
+        stall? 0
+Test 3 (SW zero): a=0x216affff b=0x02d7a82a sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=2 j=12
++-------------------------------------------+
+  instruction A: 0x216affff
+  instruction B: 0x2b38ffff
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 24
+  ID_EX.rd       = 31
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 10
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x216affff b=0x2b38ffff sw1=0xac0a0070
+        stall? 1
+Test 2 (match B): a=0x216affff b=0x2b38ffff sw2=0xac180074
+        stall? 0
+Test 3 (SW zero): a=0x216affff b=0x2b38ffff sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=2 j=13
++-------------------------------------------+
+  instruction A: 0x216affff
+  instruction B: 0x8c1a0068
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 26
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 10
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x216affff b=0x8c1a0068 sw1=0xac0a0070
+        stall? 1
+Test 2 (match B): a=0x216affff b=0x8c1a0068 sw2=0xac1a0074
+        stall? 0
+Test 3 (SW zero): a=0x216affff b=0x8c1a0068 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=2 j=14
++-------------------------------------------+
+  instruction A: 0x216affff
+  instruction B: 0xac1d006c
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 0
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 29
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 10
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x216affff b=0xac1d006c sw1=0xac0a0070
+        stall? 1
+Test 2 (match B): a=0x216affff b=0xac1d006c sw2=0xac1d0074
+        stall? 0
+Test 3 (SW zero): a=0x216affff b=0xac1d006c sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=2 j=15
++-------------------------------------------+
+  instruction A: 0x216affff
+  instruction B: 0x00000000
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 0
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 10
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x216affff b=0x00000000 sw1=0xac0a0070
+        stall? 1
+Skipping Test 2 for this instruction combination, because B appears to "write" to register zero.
+Skipping Test 3 for this instruction combination, because either A or B appear to "write" to register zero.
+
++-------------------------------------------+
+| STARTING TEST i=3 j=0
++-------------------------------------------+
+  instruction A: 0x21ac0010
+  instruction B: 0x02328020
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 18
+  ID_EX.rd       = 16
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 12
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x21ac0010 b=0x02328020 sw1=0xac0c0070
+        stall? 1
+Test 2 (match B): a=0x21ac0010 b=0x02328020 sw2=0xac100074
+        stall? 0
+Test 3 (SW zero): a=0x21ac0010 b=0x02328020 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=3 j=1
++-------------------------------------------+
+  instruction A: 0x21ac0010
+  instruction B: 0x02959822
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 21
+  ID_EX.rd       = 19
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 12
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x21ac0010 b=0x02959822 sw1=0xac0c0070
+        stall? 1
+Test 2 (match B): a=0x21ac0010 b=0x02959822 sw2=0xac130074
+        stall? 0
+Test 3 (SW zero): a=0x21ac0010 b=0x02959822 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=3 j=2
++-------------------------------------------+
+  instruction A: 0x21ac0010
+  instruction B: 0x216affff
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 10
+  ID_EX.rd       = 31
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 12
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x21ac0010 b=0x216affff sw1=0xac0c0070
+        stall? 1
+Test 2 (match B): a=0x21ac0010 b=0x216affff sw2=0xac0a0074
+        stall? 0
+Test 3 (SW zero): a=0x21ac0010 b=0x216affff sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=3 j=3
++-------------------------------------------+
+  instruction A: 0x21ac0010
+  instruction B: 0x21ac0010
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 12
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 12
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x21ac0010 b=0x21ac0010 sw1=0xac0c0070
+        stall? 0
+Test 2 (match B): a=0x21ac0010 b=0x21ac0010 sw2=0xac0c0074
+        stall? 0
+Test 3 (SW zero): a=0x21ac0010 b=0x21ac0010 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=3 j=4
++-------------------------------------------+
+  instruction A: 0x21ac0010
+  instruction B: 0x00020821
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 2
+  ID_EX.rd       = 1
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 12
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x21ac0010 b=0x00020821 sw1=0xac0c0070
+        stall? 1
+Test 2 (match B): a=0x21ac0010 b=0x00020821 sw2=0xac010074
+        stall? 0
+Test 3 (SW zero): a=0x21ac0010 b=0x00020821 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=3 j=5
++-------------------------------------------+
+  instruction A: 0x21ac0010
+  instruction B: 0x00851823
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 5
+  ID_EX.rd       = 3
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 12
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x21ac0010 b=0x00851823 sw1=0xac0c0070
+        stall? 1
+Test 2 (match B): a=0x21ac0010 b=0x00851823 sw2=0xac030074
+        stall? 0
+Test 3 (SW zero): a=0x21ac0010 b=0x00851823 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=3 j=6
++-------------------------------------------+
+  instruction A: 0x21ac0010
+  instruction B: 0x24e61234
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 6
+  ID_EX.rd       = 2
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 12
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x21ac0010 b=0x24e61234 sw1=0xac0c0070
+        stall? 1
+Test 2 (match B): a=0x21ac0010 b=0x24e61234 sw2=0xac060074
+        stall? 0
+Test 3 (SW zero): a=0x21ac0010 b=0x24e61234 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=3 j=7
++-------------------------------------------+
+  instruction A: 0x21ac0010
+  instruction B: 0x014b4824
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 11
+  ID_EX.rd       = 9
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 12
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x21ac0010 b=0x014b4824 sw1=0xac0c0070
+        stall? 1
+Test 2 (match B): a=0x21ac0010 b=0x014b4824 sw2=0xac090074
+        stall? 0
+Test 3 (SW zero): a=0x21ac0010 b=0x014b4824 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=3 j=8
++-------------------------------------------+
+  instruction A: 0x21ac0010
+  instruction B: 0x01ae6025
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 14
+  ID_EX.rd       = 12
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 12
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x21ac0010 b=0x01ae6025 sw1=0xac0c0070
+        stall? 0
+Test 2 (match B): a=0x21ac0010 b=0x01ae6025 sw2=0xac0c0074
+        stall? 0
+Test 3 (SW zero): a=0x21ac0010 b=0x01ae6025 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=3 j=9
++-------------------------------------------+
+  instruction A: 0x21ac0010
+  instruction B: 0x320f5678
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 15
+  ID_EX.rd       = 10
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 12
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x21ac0010 b=0x320f5678 sw1=0xac0c0070
+        stall? 1
+Test 2 (match B): a=0x21ac0010 b=0x320f5678 sw2=0xac0f0074
+        stall? 0
+Test 3 (SW zero): a=0x21ac0010 b=0x320f5678 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=3 j=10
++-------------------------------------------+
+  instruction A: 0x21ac0010
+  instruction B: 0x36729abc
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 18
+  ID_EX.rd       = 19
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 12
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x21ac0010 b=0x36729abc sw1=0xac0c0070
+        stall? 1
+Test 2 (match B): a=0x21ac0010 b=0x36729abc sw2=0xac120074
+        stall? 0
+Test 3 (SW zero): a=0x21ac0010 b=0x36729abc sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=3 j=11
++-------------------------------------------+
+  instruction A: 0x21ac0010
+  instruction B: 0x02d7a82a
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 23
+  ID_EX.rd       = 21
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 12
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x21ac0010 b=0x02d7a82a sw1=0xac0c0070
+        stall? 1
+Test 2 (match B): a=0x21ac0010 b=0x02d7a82a sw2=0xac150074
+        stall? 0
+Test 3 (SW zero): a=0x21ac0010 b=0x02d7a82a sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=3 j=12
++-------------------------------------------+
+  instruction A: 0x21ac0010
+  instruction B: 0x2b38ffff
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 24
+  ID_EX.rd       = 31
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 12
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x21ac0010 b=0x2b38ffff sw1=0xac0c0070
+        stall? 1
+Test 2 (match B): a=0x21ac0010 b=0x2b38ffff sw2=0xac180074
+        stall? 0
+Test 3 (SW zero): a=0x21ac0010 b=0x2b38ffff sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=3 j=13
++-------------------------------------------+
+  instruction A: 0x21ac0010
+  instruction B: 0x8c1a0068
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 26
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 12
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x21ac0010 b=0x8c1a0068 sw1=0xac0c0070
+        stall? 1
+Test 2 (match B): a=0x21ac0010 b=0x8c1a0068 sw2=0xac1a0074
+        stall? 0
+Test 3 (SW zero): a=0x21ac0010 b=0x8c1a0068 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=3 j=14
++-------------------------------------------+
+  instruction A: 0x21ac0010
+  instruction B: 0xac1d006c
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 0
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 29
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 12
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x21ac0010 b=0xac1d006c sw1=0xac0c0070
+        stall? 1
+Test 2 (match B): a=0x21ac0010 b=0xac1d006c sw2=0xac1d0074
+        stall? 0
+Test 3 (SW zero): a=0x21ac0010 b=0xac1d006c sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=3 j=15
++-------------------------------------------+
+  instruction A: 0x21ac0010
+  instruction B: 0x00000000
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 0
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 12
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x21ac0010 b=0x00000000 sw1=0xac0c0070
+        stall? 1
+Skipping Test 2 for this instruction combination, because B appears to "write" to register zero.
+Skipping Test 3 for this instruction combination, because either A or B appear to "write" to register zero.
+
++-------------------------------------------+
+| STARTING TEST i=4 j=0
++-------------------------------------------+
+  instruction A: 0x00020821
+  instruction B: 0x02328020
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 18
+  ID_EX.rd       = 16
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 1
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x00020821 b=0x02328020 sw1=0xac010070
+        stall? 1
+Test 2 (match B): a=0x00020821 b=0x02328020 sw2=0xac100074
+        stall? 0
+Test 3 (SW zero): a=0x00020821 b=0x02328020 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=4 j=1
++-------------------------------------------+
+  instruction A: 0x00020821
+  instruction B: 0x02959822
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 21
+  ID_EX.rd       = 19
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 1
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x00020821 b=0x02959822 sw1=0xac010070
+        stall? 1
+Test 2 (match B): a=0x00020821 b=0x02959822 sw2=0xac130074
+        stall? 0
+Test 3 (SW zero): a=0x00020821 b=0x02959822 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=4 j=2
++-------------------------------------------+
+  instruction A: 0x00020821
+  instruction B: 0x216affff
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 10
+  ID_EX.rd       = 31
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 1
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x00020821 b=0x216affff sw1=0xac010070
+        stall? 1
+Test 2 (match B): a=0x00020821 b=0x216affff sw2=0xac0a0074
+        stall? 0
+Test 3 (SW zero): a=0x00020821 b=0x216affff sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=4 j=3
++-------------------------------------------+
+  instruction A: 0x00020821
+  instruction B: 0x21ac0010
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 12
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 1
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x00020821 b=0x21ac0010 sw1=0xac010070
+        stall? 1
+Test 2 (match B): a=0x00020821 b=0x21ac0010 sw2=0xac0c0074
+        stall? 0
+Test 3 (SW zero): a=0x00020821 b=0x21ac0010 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=4 j=4
++-------------------------------------------+
+  instruction A: 0x00020821
+  instruction B: 0x00020821
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 2
+  ID_EX.rd       = 1
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 1
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x00020821 b=0x00020821 sw1=0xac010070
+        stall? 0
+Test 2 (match B): a=0x00020821 b=0x00020821 sw2=0xac010074
+        stall? 0
+Test 3 (SW zero): a=0x00020821 b=0x00020821 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=4 j=5
++-------------------------------------------+
+  instruction A: 0x00020821
+  instruction B: 0x00851823
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 5
+  ID_EX.rd       = 3
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 1
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x00020821 b=0x00851823 sw1=0xac010070
+        stall? 1
+Test 2 (match B): a=0x00020821 b=0x00851823 sw2=0xac030074
+        stall? 0
+Test 3 (SW zero): a=0x00020821 b=0x00851823 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=4 j=6
++-------------------------------------------+
+  instruction A: 0x00020821
+  instruction B: 0x24e61234
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 6
+  ID_EX.rd       = 2
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 1
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x00020821 b=0x24e61234 sw1=0xac010070
+        stall? 1
+Test 2 (match B): a=0x00020821 b=0x24e61234 sw2=0xac060074
+        stall? 0
+Test 3 (SW zero): a=0x00020821 b=0x24e61234 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=4 j=7
++-------------------------------------------+
+  instruction A: 0x00020821
+  instruction B: 0x014b4824
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 11
+  ID_EX.rd       = 9
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 1
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x00020821 b=0x014b4824 sw1=0xac010070
+        stall? 1
+Test 2 (match B): a=0x00020821 b=0x014b4824 sw2=0xac090074
+        stall? 0
+Test 3 (SW zero): a=0x00020821 b=0x014b4824 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=4 j=8
++-------------------------------------------+
+  instruction A: 0x00020821
+  instruction B: 0x01ae6025
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 14
+  ID_EX.rd       = 12
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 1
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x00020821 b=0x01ae6025 sw1=0xac010070
+        stall? 1
+Test 2 (match B): a=0x00020821 b=0x01ae6025 sw2=0xac0c0074
+        stall? 0
+Test 3 (SW zero): a=0x00020821 b=0x01ae6025 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=4 j=9
++-------------------------------------------+
+  instruction A: 0x00020821
+  instruction B: 0x320f5678
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 15
+  ID_EX.rd       = 10
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 1
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x00020821 b=0x320f5678 sw1=0xac010070
+        stall? 1
+Test 2 (match B): a=0x00020821 b=0x320f5678 sw2=0xac0f0074
+        stall? 0
+Test 3 (SW zero): a=0x00020821 b=0x320f5678 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=4 j=10
++-------------------------------------------+
+  instruction A: 0x00020821
+  instruction B: 0x36729abc
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 18
+  ID_EX.rd       = 19
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 1
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x00020821 b=0x36729abc sw1=0xac010070
+        stall? 1
+Test 2 (match B): a=0x00020821 b=0x36729abc sw2=0xac120074
+        stall? 0
+Test 3 (SW zero): a=0x00020821 b=0x36729abc sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=4 j=11
++-------------------------------------------+
+  instruction A: 0x00020821
+  instruction B: 0x02d7a82a
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 23
+  ID_EX.rd       = 21
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 1
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x00020821 b=0x02d7a82a sw1=0xac010070
+        stall? 1
+Test 2 (match B): a=0x00020821 b=0x02d7a82a sw2=0xac150074
+        stall? 0
+Test 3 (SW zero): a=0x00020821 b=0x02d7a82a sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=4 j=12
++-------------------------------------------+
+  instruction A: 0x00020821
+  instruction B: 0x2b38ffff
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 24
+  ID_EX.rd       = 31
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 1
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x00020821 b=0x2b38ffff sw1=0xac010070
+        stall? 1
+Test 2 (match B): a=0x00020821 b=0x2b38ffff sw2=0xac180074
+        stall? 0
+Test 3 (SW zero): a=0x00020821 b=0x2b38ffff sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=4 j=13
++-------------------------------------------+
+  instruction A: 0x00020821
+  instruction B: 0x8c1a0068
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 26
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 1
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x00020821 b=0x8c1a0068 sw1=0xac010070
+        stall? 1
+Test 2 (match B): a=0x00020821 b=0x8c1a0068 sw2=0xac1a0074
+        stall? 0
+Test 3 (SW zero): a=0x00020821 b=0x8c1a0068 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=4 j=14
++-------------------------------------------+
+  instruction A: 0x00020821
+  instruction B: 0xac1d006c
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 0
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 29
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 1
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x00020821 b=0xac1d006c sw1=0xac010070
+        stall? 1
+Test 2 (match B): a=0x00020821 b=0xac1d006c sw2=0xac1d0074
+        stall? 0
+Test 3 (SW zero): a=0x00020821 b=0xac1d006c sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=4 j=15
++-------------------------------------------+
+  instruction A: 0x00020821
+  instruction B: 0x00000000
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 0
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 1
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x00020821 b=0x00000000 sw1=0xac010070
+        stall? 1
+Skipping Test 2 for this instruction combination, because B appears to "write" to register zero.
+Skipping Test 3 for this instruction combination, because either A or B appear to "write" to register zero.
+
++-------------------------------------------+
+| STARTING TEST i=5 j=0
++-------------------------------------------+
+  instruction A: 0x00851823
+  instruction B: 0x02328020
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 18
+  ID_EX.rd       = 16
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 3
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x00851823 b=0x02328020 sw1=0xac030070
+        stall? 1
+Test 2 (match B): a=0x00851823 b=0x02328020 sw2=0xac100074
+        stall? 0
+Test 3 (SW zero): a=0x00851823 b=0x02328020 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=5 j=1
++-------------------------------------------+
+  instruction A: 0x00851823
+  instruction B: 0x02959822
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 21
+  ID_EX.rd       = 19
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 3
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x00851823 b=0x02959822 sw1=0xac030070
+        stall? 1
+Test 2 (match B): a=0x00851823 b=0x02959822 sw2=0xac130074
+        stall? 0
+Test 3 (SW zero): a=0x00851823 b=0x02959822 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=5 j=2
++-------------------------------------------+
+  instruction A: 0x00851823
+  instruction B: 0x216affff
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 10
+  ID_EX.rd       = 31
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 3
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x00851823 b=0x216affff sw1=0xac030070
+        stall? 1
+Test 2 (match B): a=0x00851823 b=0x216affff sw2=0xac0a0074
+        stall? 0
+Test 3 (SW zero): a=0x00851823 b=0x216affff sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=5 j=3
++-------------------------------------------+
+  instruction A: 0x00851823
+  instruction B: 0x21ac0010
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 12
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 3
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x00851823 b=0x21ac0010 sw1=0xac030070
+        stall? 1
+Test 2 (match B): a=0x00851823 b=0x21ac0010 sw2=0xac0c0074
+        stall? 0
+Test 3 (SW zero): a=0x00851823 b=0x21ac0010 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=5 j=4
++-------------------------------------------+
+  instruction A: 0x00851823
+  instruction B: 0x00020821
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 2
+  ID_EX.rd       = 1
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 3
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x00851823 b=0x00020821 sw1=0xac030070
+        stall? 1
+Test 2 (match B): a=0x00851823 b=0x00020821 sw2=0xac010074
+        stall? 0
+Test 3 (SW zero): a=0x00851823 b=0x00020821 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=5 j=5
++-------------------------------------------+
+  instruction A: 0x00851823
+  instruction B: 0x00851823
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 5
+  ID_EX.rd       = 3
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 3
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x00851823 b=0x00851823 sw1=0xac030070
+        stall? 0
+Test 2 (match B): a=0x00851823 b=0x00851823 sw2=0xac030074
+        stall? 0
+Test 3 (SW zero): a=0x00851823 b=0x00851823 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=5 j=6
++-------------------------------------------+
+  instruction A: 0x00851823
+  instruction B: 0x24e61234
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 6
+  ID_EX.rd       = 2
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 3
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x00851823 b=0x24e61234 sw1=0xac030070
+        stall? 1
+Test 2 (match B): a=0x00851823 b=0x24e61234 sw2=0xac060074
+        stall? 0
+Test 3 (SW zero): a=0x00851823 b=0x24e61234 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=5 j=7
++-------------------------------------------+
+  instruction A: 0x00851823
+  instruction B: 0x014b4824
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 11
+  ID_EX.rd       = 9
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 3
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x00851823 b=0x014b4824 sw1=0xac030070
+        stall? 1
+Test 2 (match B): a=0x00851823 b=0x014b4824 sw2=0xac090074
+        stall? 0
+Test 3 (SW zero): a=0x00851823 b=0x014b4824 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=5 j=8
++-------------------------------------------+
+  instruction A: 0x00851823
+  instruction B: 0x01ae6025
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 14
+  ID_EX.rd       = 12
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 3
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x00851823 b=0x01ae6025 sw1=0xac030070
+        stall? 1
+Test 2 (match B): a=0x00851823 b=0x01ae6025 sw2=0xac0c0074
+        stall? 0
+Test 3 (SW zero): a=0x00851823 b=0x01ae6025 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=5 j=9
++-------------------------------------------+
+  instruction A: 0x00851823
+  instruction B: 0x320f5678
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 15
+  ID_EX.rd       = 10
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 3
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x00851823 b=0x320f5678 sw1=0xac030070
+        stall? 1
+Test 2 (match B): a=0x00851823 b=0x320f5678 sw2=0xac0f0074
+        stall? 0
+Test 3 (SW zero): a=0x00851823 b=0x320f5678 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=5 j=10
++-------------------------------------------+
+  instruction A: 0x00851823
+  instruction B: 0x36729abc
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 18
+  ID_EX.rd       = 19
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 3
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x00851823 b=0x36729abc sw1=0xac030070
+        stall? 1
+Test 2 (match B): a=0x00851823 b=0x36729abc sw2=0xac120074
+        stall? 0
+Test 3 (SW zero): a=0x00851823 b=0x36729abc sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=5 j=11
++-------------------------------------------+
+  instruction A: 0x00851823
+  instruction B: 0x02d7a82a
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 23
+  ID_EX.rd       = 21
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 3
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x00851823 b=0x02d7a82a sw1=0xac030070
+        stall? 1
+Test 2 (match B): a=0x00851823 b=0x02d7a82a sw2=0xac150074
+        stall? 0
+Test 3 (SW zero): a=0x00851823 b=0x02d7a82a sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=5 j=12
++-------------------------------------------+
+  instruction A: 0x00851823
+  instruction B: 0x2b38ffff
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 24
+  ID_EX.rd       = 31
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 3
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x00851823 b=0x2b38ffff sw1=0xac030070
+        stall? 1
+Test 2 (match B): a=0x00851823 b=0x2b38ffff sw2=0xac180074
+        stall? 0
+Test 3 (SW zero): a=0x00851823 b=0x2b38ffff sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=5 j=13
++-------------------------------------------+
+  instruction A: 0x00851823
+  instruction B: 0x8c1a0068
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 26
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 3
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x00851823 b=0x8c1a0068 sw1=0xac030070
+        stall? 1
+Test 2 (match B): a=0x00851823 b=0x8c1a0068 sw2=0xac1a0074
+        stall? 0
+Test 3 (SW zero): a=0x00851823 b=0x8c1a0068 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=5 j=14
++-------------------------------------------+
+  instruction A: 0x00851823
+  instruction B: 0xac1d006c
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 0
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 29
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 3
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x00851823 b=0xac1d006c sw1=0xac030070
+        stall? 1
+Test 2 (match B): a=0x00851823 b=0xac1d006c sw2=0xac1d0074
+        stall? 0
+Test 3 (SW zero): a=0x00851823 b=0xac1d006c sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=5 j=15
++-------------------------------------------+
+  instruction A: 0x00851823
+  instruction B: 0x00000000
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 0
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 3
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x00851823 b=0x00000000 sw1=0xac030070
+        stall? 1
+Skipping Test 2 for this instruction combination, because B appears to "write" to register zero.
+Skipping Test 3 for this instruction combination, because either A or B appear to "write" to register zero.
+
++-------------------------------------------+
+| STARTING TEST i=6 j=0
++-------------------------------------------+
+  instruction A: 0x24e61234
+  instruction B: 0x02328020
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 18
+  ID_EX.rd       = 16
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 6
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x24e61234 b=0x02328020 sw1=0xac060070
+        stall? 1
+Test 2 (match B): a=0x24e61234 b=0x02328020 sw2=0xac100074
+        stall? 0
+Test 3 (SW zero): a=0x24e61234 b=0x02328020 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=6 j=1
++-------------------------------------------+
+  instruction A: 0x24e61234
+  instruction B: 0x02959822
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 21
+  ID_EX.rd       = 19
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 6
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x24e61234 b=0x02959822 sw1=0xac060070
+        stall? 1
+Test 2 (match B): a=0x24e61234 b=0x02959822 sw2=0xac130074
+        stall? 0
+Test 3 (SW zero): a=0x24e61234 b=0x02959822 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=6 j=2
++-------------------------------------------+
+  instruction A: 0x24e61234
+  instruction B: 0x216affff
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 10
+  ID_EX.rd       = 31
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 6
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x24e61234 b=0x216affff sw1=0xac060070
+        stall? 1
+Test 2 (match B): a=0x24e61234 b=0x216affff sw2=0xac0a0074
+        stall? 0
+Test 3 (SW zero): a=0x24e61234 b=0x216affff sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=6 j=3
++-------------------------------------------+
+  instruction A: 0x24e61234
+  instruction B: 0x21ac0010
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 12
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 6
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x24e61234 b=0x21ac0010 sw1=0xac060070
+        stall? 1
+Test 2 (match B): a=0x24e61234 b=0x21ac0010 sw2=0xac0c0074
+        stall? 0
+Test 3 (SW zero): a=0x24e61234 b=0x21ac0010 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=6 j=4
++-------------------------------------------+
+  instruction A: 0x24e61234
+  instruction B: 0x00020821
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 2
+  ID_EX.rd       = 1
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 6
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x24e61234 b=0x00020821 sw1=0xac060070
+        stall? 1
+Test 2 (match B): a=0x24e61234 b=0x00020821 sw2=0xac010074
+        stall? 0
+Test 3 (SW zero): a=0x24e61234 b=0x00020821 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=6 j=5
++-------------------------------------------+
+  instruction A: 0x24e61234
+  instruction B: 0x00851823
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 5
+  ID_EX.rd       = 3
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 6
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x24e61234 b=0x00851823 sw1=0xac060070
+        stall? 1
+Test 2 (match B): a=0x24e61234 b=0x00851823 sw2=0xac030074
+        stall? 0
+Test 3 (SW zero): a=0x24e61234 b=0x00851823 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=6 j=6
++-------------------------------------------+
+  instruction A: 0x24e61234
+  instruction B: 0x24e61234
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 6
+  ID_EX.rd       = 2
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 6
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x24e61234 b=0x24e61234 sw1=0xac060070
+        stall? 0
+Test 2 (match B): a=0x24e61234 b=0x24e61234 sw2=0xac060074
+        stall? 0
+Test 3 (SW zero): a=0x24e61234 b=0x24e61234 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=6 j=7
++-------------------------------------------+
+  instruction A: 0x24e61234
+  instruction B: 0x014b4824
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 11
+  ID_EX.rd       = 9
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 6
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x24e61234 b=0x014b4824 sw1=0xac060070
+        stall? 1
+Test 2 (match B): a=0x24e61234 b=0x014b4824 sw2=0xac090074
+        stall? 0
+Test 3 (SW zero): a=0x24e61234 b=0x014b4824 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=6 j=8
++-------------------------------------------+
+  instruction A: 0x24e61234
+  instruction B: 0x01ae6025
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 14
+  ID_EX.rd       = 12
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 6
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x24e61234 b=0x01ae6025 sw1=0xac060070
+        stall? 1
+Test 2 (match B): a=0x24e61234 b=0x01ae6025 sw2=0xac0c0074
+        stall? 0
+Test 3 (SW zero): a=0x24e61234 b=0x01ae6025 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=6 j=9
++-------------------------------------------+
+  instruction A: 0x24e61234
+  instruction B: 0x320f5678
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 15
+  ID_EX.rd       = 10
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 6
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x24e61234 b=0x320f5678 sw1=0xac060070
+        stall? 1
+Test 2 (match B): a=0x24e61234 b=0x320f5678 sw2=0xac0f0074
+        stall? 0
+Test 3 (SW zero): a=0x24e61234 b=0x320f5678 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=6 j=10
++-------------------------------------------+
+  instruction A: 0x24e61234
+  instruction B: 0x36729abc
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 18
+  ID_EX.rd       = 19
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 6
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x24e61234 b=0x36729abc sw1=0xac060070
+        stall? 1
+Test 2 (match B): a=0x24e61234 b=0x36729abc sw2=0xac120074
+        stall? 0
+Test 3 (SW zero): a=0x24e61234 b=0x36729abc sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=6 j=11
++-------------------------------------------+
+  instruction A: 0x24e61234
+  instruction B: 0x02d7a82a
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 23
+  ID_EX.rd       = 21
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 6
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x24e61234 b=0x02d7a82a sw1=0xac060070
+        stall? 1
+Test 2 (match B): a=0x24e61234 b=0x02d7a82a sw2=0xac150074
+        stall? 0
+Test 3 (SW zero): a=0x24e61234 b=0x02d7a82a sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=6 j=12
++-------------------------------------------+
+  instruction A: 0x24e61234
+  instruction B: 0x2b38ffff
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 24
+  ID_EX.rd       = 31
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 6
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x24e61234 b=0x2b38ffff sw1=0xac060070
+        stall? 1
+Test 2 (match B): a=0x24e61234 b=0x2b38ffff sw2=0xac180074
+        stall? 0
+Test 3 (SW zero): a=0x24e61234 b=0x2b38ffff sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=6 j=13
++-------------------------------------------+
+  instruction A: 0x24e61234
+  instruction B: 0x8c1a0068
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 26
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 6
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x24e61234 b=0x8c1a0068 sw1=0xac060070
+        stall? 1
+Test 2 (match B): a=0x24e61234 b=0x8c1a0068 sw2=0xac1a0074
+        stall? 0
+Test 3 (SW zero): a=0x24e61234 b=0x8c1a0068 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=6 j=14
++-------------------------------------------+
+  instruction A: 0x24e61234
+  instruction B: 0xac1d006c
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 0
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 29
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 6
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x24e61234 b=0xac1d006c sw1=0xac060070
+        stall? 1
+Test 2 (match B): a=0x24e61234 b=0xac1d006c sw2=0xac1d0074
+        stall? 0
+Test 3 (SW zero): a=0x24e61234 b=0xac1d006c sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=6 j=15
++-------------------------------------------+
+  instruction A: 0x24e61234
+  instruction B: 0x00000000
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 0
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 6
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x24e61234 b=0x00000000 sw1=0xac060070
+        stall? 1
+Skipping Test 2 for this instruction combination, because B appears to "write" to register zero.
+Skipping Test 3 for this instruction combination, because either A or B appear to "write" to register zero.
+
++-------------------------------------------+
+| STARTING TEST i=7 j=0
++-------------------------------------------+
+  instruction A: 0x014b4824
+  instruction B: 0x02328020
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 18
+  ID_EX.rd       = 16
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 9
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x014b4824 b=0x02328020 sw1=0xac090070
+        stall? 1
+Test 2 (match B): a=0x014b4824 b=0x02328020 sw2=0xac100074
+        stall? 0
+Test 3 (SW zero): a=0x014b4824 b=0x02328020 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=7 j=1
++-------------------------------------------+
+  instruction A: 0x014b4824
+  instruction B: 0x02959822
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 21
+  ID_EX.rd       = 19
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 9
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x014b4824 b=0x02959822 sw1=0xac090070
+        stall? 1
+Test 2 (match B): a=0x014b4824 b=0x02959822 sw2=0xac130074
+        stall? 0
+Test 3 (SW zero): a=0x014b4824 b=0x02959822 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=7 j=2
++-------------------------------------------+
+  instruction A: 0x014b4824
+  instruction B: 0x216affff
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 10
+  ID_EX.rd       = 31
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 9
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x014b4824 b=0x216affff sw1=0xac090070
+        stall? 1
+Test 2 (match B): a=0x014b4824 b=0x216affff sw2=0xac0a0074
+        stall? 0
+Test 3 (SW zero): a=0x014b4824 b=0x216affff sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=7 j=3
++-------------------------------------------+
+  instruction A: 0x014b4824
+  instruction B: 0x21ac0010
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 12
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 9
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x014b4824 b=0x21ac0010 sw1=0xac090070
+        stall? 1
+Test 2 (match B): a=0x014b4824 b=0x21ac0010 sw2=0xac0c0074
+        stall? 0
+Test 3 (SW zero): a=0x014b4824 b=0x21ac0010 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=7 j=4
++-------------------------------------------+
+  instruction A: 0x014b4824
+  instruction B: 0x00020821
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 2
+  ID_EX.rd       = 1
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 9
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x014b4824 b=0x00020821 sw1=0xac090070
+        stall? 1
+Test 2 (match B): a=0x014b4824 b=0x00020821 sw2=0xac010074
+        stall? 0
+Test 3 (SW zero): a=0x014b4824 b=0x00020821 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=7 j=5
++-------------------------------------------+
+  instruction A: 0x014b4824
+  instruction B: 0x00851823
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 5
+  ID_EX.rd       = 3
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 9
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x014b4824 b=0x00851823 sw1=0xac090070
+        stall? 1
+Test 2 (match B): a=0x014b4824 b=0x00851823 sw2=0xac030074
+        stall? 0
+Test 3 (SW zero): a=0x014b4824 b=0x00851823 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=7 j=6
++-------------------------------------------+
+  instruction A: 0x014b4824
+  instruction B: 0x24e61234
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 6
+  ID_EX.rd       = 2
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 9
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x014b4824 b=0x24e61234 sw1=0xac090070
+        stall? 1
+Test 2 (match B): a=0x014b4824 b=0x24e61234 sw2=0xac060074
+        stall? 0
+Test 3 (SW zero): a=0x014b4824 b=0x24e61234 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=7 j=7
++-------------------------------------------+
+  instruction A: 0x014b4824
+  instruction B: 0x014b4824
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 11
+  ID_EX.rd       = 9
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 9
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x014b4824 b=0x014b4824 sw1=0xac090070
+        stall? 0
+Test 2 (match B): a=0x014b4824 b=0x014b4824 sw2=0xac090074
+        stall? 0
+Test 3 (SW zero): a=0x014b4824 b=0x014b4824 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=7 j=8
++-------------------------------------------+
+  instruction A: 0x014b4824
+  instruction B: 0x01ae6025
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 14
+  ID_EX.rd       = 12
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 9
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x014b4824 b=0x01ae6025 sw1=0xac090070
+        stall? 1
+Test 2 (match B): a=0x014b4824 b=0x01ae6025 sw2=0xac0c0074
+        stall? 0
+Test 3 (SW zero): a=0x014b4824 b=0x01ae6025 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=7 j=9
++-------------------------------------------+
+  instruction A: 0x014b4824
+  instruction B: 0x320f5678
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 15
+  ID_EX.rd       = 10
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 9
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x014b4824 b=0x320f5678 sw1=0xac090070
+        stall? 1
+Test 2 (match B): a=0x014b4824 b=0x320f5678 sw2=0xac0f0074
+        stall? 0
+Test 3 (SW zero): a=0x014b4824 b=0x320f5678 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=7 j=10
++-------------------------------------------+
+  instruction A: 0x014b4824
+  instruction B: 0x36729abc
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 18
+  ID_EX.rd       = 19
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 9
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x014b4824 b=0x36729abc sw1=0xac090070
+        stall? 1
+Test 2 (match B): a=0x014b4824 b=0x36729abc sw2=0xac120074
+        stall? 0
+Test 3 (SW zero): a=0x014b4824 b=0x36729abc sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=7 j=11
++-------------------------------------------+
+  instruction A: 0x014b4824
+  instruction B: 0x02d7a82a
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 23
+  ID_EX.rd       = 21
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 9
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x014b4824 b=0x02d7a82a sw1=0xac090070
+        stall? 1
+Test 2 (match B): a=0x014b4824 b=0x02d7a82a sw2=0xac150074
+        stall? 0
+Test 3 (SW zero): a=0x014b4824 b=0x02d7a82a sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=7 j=12
++-------------------------------------------+
+  instruction A: 0x014b4824
+  instruction B: 0x2b38ffff
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 24
+  ID_EX.rd       = 31
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 9
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x014b4824 b=0x2b38ffff sw1=0xac090070
+        stall? 1
+Test 2 (match B): a=0x014b4824 b=0x2b38ffff sw2=0xac180074
+        stall? 0
+Test 3 (SW zero): a=0x014b4824 b=0x2b38ffff sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=7 j=13
++-------------------------------------------+
+  instruction A: 0x014b4824
+  instruction B: 0x8c1a0068
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 26
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 9
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x014b4824 b=0x8c1a0068 sw1=0xac090070
+        stall? 1
+Test 2 (match B): a=0x014b4824 b=0x8c1a0068 sw2=0xac1a0074
+        stall? 0
+Test 3 (SW zero): a=0x014b4824 b=0x8c1a0068 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=7 j=14
++-------------------------------------------+
+  instruction A: 0x014b4824
+  instruction B: 0xac1d006c
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 0
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 29
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 9
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x014b4824 b=0xac1d006c sw1=0xac090070
+        stall? 1
+Test 2 (match B): a=0x014b4824 b=0xac1d006c sw2=0xac1d0074
+        stall? 0
+Test 3 (SW zero): a=0x014b4824 b=0xac1d006c sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=7 j=15
++-------------------------------------------+
+  instruction A: 0x014b4824
+  instruction B: 0x00000000
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 0
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 9
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x014b4824 b=0x00000000 sw1=0xac090070
+        stall? 1
+Skipping Test 2 for this instruction combination, because B appears to "write" to register zero.
+Skipping Test 3 for this instruction combination, because either A or B appear to "write" to register zero.
+
++-------------------------------------------+
+| STARTING TEST i=8 j=0
++-------------------------------------------+
+  instruction A: 0x01ae6025
+  instruction B: 0x02328020
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 18
+  ID_EX.rd       = 16
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 12
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x01ae6025 b=0x02328020 sw1=0xac0c0070
+        stall? 1
+Test 2 (match B): a=0x01ae6025 b=0x02328020 sw2=0xac100074
+        stall? 0
+Test 3 (SW zero): a=0x01ae6025 b=0x02328020 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=8 j=1
++-------------------------------------------+
+  instruction A: 0x01ae6025
+  instruction B: 0x02959822
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 21
+  ID_EX.rd       = 19
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 12
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x01ae6025 b=0x02959822 sw1=0xac0c0070
+        stall? 1
+Test 2 (match B): a=0x01ae6025 b=0x02959822 sw2=0xac130074
+        stall? 0
+Test 3 (SW zero): a=0x01ae6025 b=0x02959822 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=8 j=2
++-------------------------------------------+
+  instruction A: 0x01ae6025
+  instruction B: 0x216affff
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 10
+  ID_EX.rd       = 31
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 12
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x01ae6025 b=0x216affff sw1=0xac0c0070
+        stall? 1
+Test 2 (match B): a=0x01ae6025 b=0x216affff sw2=0xac0a0074
+        stall? 0
+Test 3 (SW zero): a=0x01ae6025 b=0x216affff sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=8 j=3
++-------------------------------------------+
+  instruction A: 0x01ae6025
+  instruction B: 0x21ac0010
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 12
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 12
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x01ae6025 b=0x21ac0010 sw1=0xac0c0070
+        stall? 0
+Test 2 (match B): a=0x01ae6025 b=0x21ac0010 sw2=0xac0c0074
+        stall? 0
+Test 3 (SW zero): a=0x01ae6025 b=0x21ac0010 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=8 j=4
++-------------------------------------------+
+  instruction A: 0x01ae6025
+  instruction B: 0x00020821
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 2
+  ID_EX.rd       = 1
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 12
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x01ae6025 b=0x00020821 sw1=0xac0c0070
+        stall? 1
+Test 2 (match B): a=0x01ae6025 b=0x00020821 sw2=0xac010074
+        stall? 0
+Test 3 (SW zero): a=0x01ae6025 b=0x00020821 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=8 j=5
++-------------------------------------------+
+  instruction A: 0x01ae6025
+  instruction B: 0x00851823
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 5
+  ID_EX.rd       = 3
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 12
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x01ae6025 b=0x00851823 sw1=0xac0c0070
+        stall? 1
+Test 2 (match B): a=0x01ae6025 b=0x00851823 sw2=0xac030074
+        stall? 0
+Test 3 (SW zero): a=0x01ae6025 b=0x00851823 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=8 j=6
++-------------------------------------------+
+  instruction A: 0x01ae6025
+  instruction B: 0x24e61234
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 6
+  ID_EX.rd       = 2
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 12
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x01ae6025 b=0x24e61234 sw1=0xac0c0070
+        stall? 1
+Test 2 (match B): a=0x01ae6025 b=0x24e61234 sw2=0xac060074
+        stall? 0
+Test 3 (SW zero): a=0x01ae6025 b=0x24e61234 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=8 j=7
++-------------------------------------------+
+  instruction A: 0x01ae6025
+  instruction B: 0x014b4824
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 11
+  ID_EX.rd       = 9
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 12
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x01ae6025 b=0x014b4824 sw1=0xac0c0070
+        stall? 1
+Test 2 (match B): a=0x01ae6025 b=0x014b4824 sw2=0xac090074
+        stall? 0
+Test 3 (SW zero): a=0x01ae6025 b=0x014b4824 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=8 j=8
++-------------------------------------------+
+  instruction A: 0x01ae6025
+  instruction B: 0x01ae6025
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 14
+  ID_EX.rd       = 12
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 12
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x01ae6025 b=0x01ae6025 sw1=0xac0c0070
+        stall? 0
+Test 2 (match B): a=0x01ae6025 b=0x01ae6025 sw2=0xac0c0074
+        stall? 0
+Test 3 (SW zero): a=0x01ae6025 b=0x01ae6025 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=8 j=9
++-------------------------------------------+
+  instruction A: 0x01ae6025
+  instruction B: 0x320f5678
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 15
+  ID_EX.rd       = 10
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 12
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x01ae6025 b=0x320f5678 sw1=0xac0c0070
+        stall? 1
+Test 2 (match B): a=0x01ae6025 b=0x320f5678 sw2=0xac0f0074
+        stall? 0
+Test 3 (SW zero): a=0x01ae6025 b=0x320f5678 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=8 j=10
++-------------------------------------------+
+  instruction A: 0x01ae6025
+  instruction B: 0x36729abc
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 18
+  ID_EX.rd       = 19
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 12
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x01ae6025 b=0x36729abc sw1=0xac0c0070
+        stall? 1
+Test 2 (match B): a=0x01ae6025 b=0x36729abc sw2=0xac120074
+        stall? 0
+Test 3 (SW zero): a=0x01ae6025 b=0x36729abc sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=8 j=11
++-------------------------------------------+
+  instruction A: 0x01ae6025
+  instruction B: 0x02d7a82a
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 23
+  ID_EX.rd       = 21
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 12
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x01ae6025 b=0x02d7a82a sw1=0xac0c0070
+        stall? 1
+Test 2 (match B): a=0x01ae6025 b=0x02d7a82a sw2=0xac150074
+        stall? 0
+Test 3 (SW zero): a=0x01ae6025 b=0x02d7a82a sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=8 j=12
++-------------------------------------------+
+  instruction A: 0x01ae6025
+  instruction B: 0x2b38ffff
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 24
+  ID_EX.rd       = 31
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 12
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x01ae6025 b=0x2b38ffff sw1=0xac0c0070
+        stall? 1
+Test 2 (match B): a=0x01ae6025 b=0x2b38ffff sw2=0xac180074
+        stall? 0
+Test 3 (SW zero): a=0x01ae6025 b=0x2b38ffff sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=8 j=13
++-------------------------------------------+
+  instruction A: 0x01ae6025
+  instruction B: 0x8c1a0068
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 26
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 12
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x01ae6025 b=0x8c1a0068 sw1=0xac0c0070
+        stall? 1
+Test 2 (match B): a=0x01ae6025 b=0x8c1a0068 sw2=0xac1a0074
+        stall? 0
+Test 3 (SW zero): a=0x01ae6025 b=0x8c1a0068 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=8 j=14
++-------------------------------------------+
+  instruction A: 0x01ae6025
+  instruction B: 0xac1d006c
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 0
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 29
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 12
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x01ae6025 b=0xac1d006c sw1=0xac0c0070
+        stall? 1
+Test 2 (match B): a=0x01ae6025 b=0xac1d006c sw2=0xac1d0074
+        stall? 0
+Test 3 (SW zero): a=0x01ae6025 b=0xac1d006c sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=8 j=15
++-------------------------------------------+
+  instruction A: 0x01ae6025
+  instruction B: 0x00000000
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 0
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 12
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x01ae6025 b=0x00000000 sw1=0xac0c0070
+        stall? 1
+Skipping Test 2 for this instruction combination, because B appears to "write" to register zero.
+Skipping Test 3 for this instruction combination, because either A or B appear to "write" to register zero.
+
++-------------------------------------------+
+| STARTING TEST i=9 j=0
++-------------------------------------------+
+  instruction A: 0x320f5678
+  instruction B: 0x02328020
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 18
+  ID_EX.rd       = 16
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 15
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x320f5678 b=0x02328020 sw1=0xac0f0070
+        stall? 1
+Test 2 (match B): a=0x320f5678 b=0x02328020 sw2=0xac100074
+        stall? 0
+Test 3 (SW zero): a=0x320f5678 b=0x02328020 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=9 j=1
++-------------------------------------------+
+  instruction A: 0x320f5678
+  instruction B: 0x02959822
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 21
+  ID_EX.rd       = 19
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 15
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x320f5678 b=0x02959822 sw1=0xac0f0070
+        stall? 1
+Test 2 (match B): a=0x320f5678 b=0x02959822 sw2=0xac130074
+        stall? 0
+Test 3 (SW zero): a=0x320f5678 b=0x02959822 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=9 j=2
++-------------------------------------------+
+  instruction A: 0x320f5678
+  instruction B: 0x216affff
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 10
+  ID_EX.rd       = 31
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 15
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x320f5678 b=0x216affff sw1=0xac0f0070
+        stall? 1
+Test 2 (match B): a=0x320f5678 b=0x216affff sw2=0xac0a0074
+        stall? 0
+Test 3 (SW zero): a=0x320f5678 b=0x216affff sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=9 j=3
++-------------------------------------------+
+  instruction A: 0x320f5678
+  instruction B: 0x21ac0010
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 12
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 15
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x320f5678 b=0x21ac0010 sw1=0xac0f0070
+        stall? 1
+Test 2 (match B): a=0x320f5678 b=0x21ac0010 sw2=0xac0c0074
+        stall? 0
+Test 3 (SW zero): a=0x320f5678 b=0x21ac0010 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=9 j=4
++-------------------------------------------+
+  instruction A: 0x320f5678
+  instruction B: 0x00020821
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 2
+  ID_EX.rd       = 1
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 15
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x320f5678 b=0x00020821 sw1=0xac0f0070
+        stall? 1
+Test 2 (match B): a=0x320f5678 b=0x00020821 sw2=0xac010074
+        stall? 0
+Test 3 (SW zero): a=0x320f5678 b=0x00020821 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=9 j=5
++-------------------------------------------+
+  instruction A: 0x320f5678
+  instruction B: 0x00851823
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 5
+  ID_EX.rd       = 3
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 15
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x320f5678 b=0x00851823 sw1=0xac0f0070
+        stall? 1
+Test 2 (match B): a=0x320f5678 b=0x00851823 sw2=0xac030074
+        stall? 0
+Test 3 (SW zero): a=0x320f5678 b=0x00851823 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=9 j=6
++-------------------------------------------+
+  instruction A: 0x320f5678
+  instruction B: 0x24e61234
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 6
+  ID_EX.rd       = 2
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 15
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x320f5678 b=0x24e61234 sw1=0xac0f0070
+        stall? 1
+Test 2 (match B): a=0x320f5678 b=0x24e61234 sw2=0xac060074
+        stall? 0
+Test 3 (SW zero): a=0x320f5678 b=0x24e61234 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=9 j=7
++-------------------------------------------+
+  instruction A: 0x320f5678
+  instruction B: 0x014b4824
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 11
+  ID_EX.rd       = 9
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 15
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x320f5678 b=0x014b4824 sw1=0xac0f0070
+        stall? 1
+Test 2 (match B): a=0x320f5678 b=0x014b4824 sw2=0xac090074
+        stall? 0
+Test 3 (SW zero): a=0x320f5678 b=0x014b4824 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=9 j=8
++-------------------------------------------+
+  instruction A: 0x320f5678
+  instruction B: 0x01ae6025
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 14
+  ID_EX.rd       = 12
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 15
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x320f5678 b=0x01ae6025 sw1=0xac0f0070
+        stall? 1
+Test 2 (match B): a=0x320f5678 b=0x01ae6025 sw2=0xac0c0074
+        stall? 0
+Test 3 (SW zero): a=0x320f5678 b=0x01ae6025 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=9 j=9
++-------------------------------------------+
+  instruction A: 0x320f5678
+  instruction B: 0x320f5678
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 15
+  ID_EX.rd       = 10
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 15
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x320f5678 b=0x320f5678 sw1=0xac0f0070
+        stall? 0
+Test 2 (match B): a=0x320f5678 b=0x320f5678 sw2=0xac0f0074
+        stall? 0
+Test 3 (SW zero): a=0x320f5678 b=0x320f5678 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=9 j=10
++-------------------------------------------+
+  instruction A: 0x320f5678
+  instruction B: 0x36729abc
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 18
+  ID_EX.rd       = 19
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 15
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x320f5678 b=0x36729abc sw1=0xac0f0070
+        stall? 1
+Test 2 (match B): a=0x320f5678 b=0x36729abc sw2=0xac120074
+        stall? 0
+Test 3 (SW zero): a=0x320f5678 b=0x36729abc sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=9 j=11
++-------------------------------------------+
+  instruction A: 0x320f5678
+  instruction B: 0x02d7a82a
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 23
+  ID_EX.rd       = 21
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 15
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x320f5678 b=0x02d7a82a sw1=0xac0f0070
+        stall? 1
+Test 2 (match B): a=0x320f5678 b=0x02d7a82a sw2=0xac150074
+        stall? 0
+Test 3 (SW zero): a=0x320f5678 b=0x02d7a82a sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=9 j=12
++-------------------------------------------+
+  instruction A: 0x320f5678
+  instruction B: 0x2b38ffff
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 24
+  ID_EX.rd       = 31
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 15
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x320f5678 b=0x2b38ffff sw1=0xac0f0070
+        stall? 1
+Test 2 (match B): a=0x320f5678 b=0x2b38ffff sw2=0xac180074
+        stall? 0
+Test 3 (SW zero): a=0x320f5678 b=0x2b38ffff sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=9 j=13
++-------------------------------------------+
+  instruction A: 0x320f5678
+  instruction B: 0x8c1a0068
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 26
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 15
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x320f5678 b=0x8c1a0068 sw1=0xac0f0070
+        stall? 1
+Test 2 (match B): a=0x320f5678 b=0x8c1a0068 sw2=0xac1a0074
+        stall? 0
+Test 3 (SW zero): a=0x320f5678 b=0x8c1a0068 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=9 j=14
++-------------------------------------------+
+  instruction A: 0x320f5678
+  instruction B: 0xac1d006c
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 0
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 29
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 15
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x320f5678 b=0xac1d006c sw1=0xac0f0070
+        stall? 1
+Test 2 (match B): a=0x320f5678 b=0xac1d006c sw2=0xac1d0074
+        stall? 0
+Test 3 (SW zero): a=0x320f5678 b=0xac1d006c sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=9 j=15
++-------------------------------------------+
+  instruction A: 0x320f5678
+  instruction B: 0x00000000
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 0
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 15
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x320f5678 b=0x00000000 sw1=0xac0f0070
+        stall? 1
+Skipping Test 2 for this instruction combination, because B appears to "write" to register zero.
+Skipping Test 3 for this instruction combination, because either A or B appear to "write" to register zero.
+
++-------------------------------------------+
+| STARTING TEST i=10 j=0
++-------------------------------------------+
+  instruction A: 0x36729abc
+  instruction B: 0x02328020
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 18
+  ID_EX.rd       = 16
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 18
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x36729abc b=0x02328020 sw1=0xac120070
+        stall? 1
+Test 2 (match B): a=0x36729abc b=0x02328020 sw2=0xac100074
+        stall? 0
+Test 3 (SW zero): a=0x36729abc b=0x02328020 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=10 j=1
++-------------------------------------------+
+  instruction A: 0x36729abc
+  instruction B: 0x02959822
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 21
+  ID_EX.rd       = 19
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 18
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x36729abc b=0x02959822 sw1=0xac120070
+        stall? 1
+Test 2 (match B): a=0x36729abc b=0x02959822 sw2=0xac130074
+        stall? 0
+Test 3 (SW zero): a=0x36729abc b=0x02959822 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=10 j=2
++-------------------------------------------+
+  instruction A: 0x36729abc
+  instruction B: 0x216affff
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 10
+  ID_EX.rd       = 31
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 18
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x36729abc b=0x216affff sw1=0xac120070
+        stall? 1
+Test 2 (match B): a=0x36729abc b=0x216affff sw2=0xac0a0074
+        stall? 0
+Test 3 (SW zero): a=0x36729abc b=0x216affff sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=10 j=3
++-------------------------------------------+
+  instruction A: 0x36729abc
+  instruction B: 0x21ac0010
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 12
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 18
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x36729abc b=0x21ac0010 sw1=0xac120070
+        stall? 1
+Test 2 (match B): a=0x36729abc b=0x21ac0010 sw2=0xac0c0074
+        stall? 0
+Test 3 (SW zero): a=0x36729abc b=0x21ac0010 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=10 j=4
++-------------------------------------------+
+  instruction A: 0x36729abc
+  instruction B: 0x00020821
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 2
+  ID_EX.rd       = 1
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 18
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x36729abc b=0x00020821 sw1=0xac120070
+        stall? 1
+Test 2 (match B): a=0x36729abc b=0x00020821 sw2=0xac010074
+        stall? 0
+Test 3 (SW zero): a=0x36729abc b=0x00020821 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=10 j=5
++-------------------------------------------+
+  instruction A: 0x36729abc
+  instruction B: 0x00851823
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 5
+  ID_EX.rd       = 3
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 18
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x36729abc b=0x00851823 sw1=0xac120070
+        stall? 1
+Test 2 (match B): a=0x36729abc b=0x00851823 sw2=0xac030074
+        stall? 0
+Test 3 (SW zero): a=0x36729abc b=0x00851823 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=10 j=6
++-------------------------------------------+
+  instruction A: 0x36729abc
+  instruction B: 0x24e61234
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 6
+  ID_EX.rd       = 2
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 18
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x36729abc b=0x24e61234 sw1=0xac120070
+        stall? 1
+Test 2 (match B): a=0x36729abc b=0x24e61234 sw2=0xac060074
+        stall? 0
+Test 3 (SW zero): a=0x36729abc b=0x24e61234 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=10 j=7
++-------------------------------------------+
+  instruction A: 0x36729abc
+  instruction B: 0x014b4824
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 11
+  ID_EX.rd       = 9
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 18
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x36729abc b=0x014b4824 sw1=0xac120070
+        stall? 1
+Test 2 (match B): a=0x36729abc b=0x014b4824 sw2=0xac090074
+        stall? 0
+Test 3 (SW zero): a=0x36729abc b=0x014b4824 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=10 j=8
++-------------------------------------------+
+  instruction A: 0x36729abc
+  instruction B: 0x01ae6025
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 14
+  ID_EX.rd       = 12
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 18
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x36729abc b=0x01ae6025 sw1=0xac120070
+        stall? 1
+Test 2 (match B): a=0x36729abc b=0x01ae6025 sw2=0xac0c0074
+        stall? 0
+Test 3 (SW zero): a=0x36729abc b=0x01ae6025 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=10 j=9
++-------------------------------------------+
+  instruction A: 0x36729abc
+  instruction B: 0x320f5678
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 15
+  ID_EX.rd       = 10
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 18
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x36729abc b=0x320f5678 sw1=0xac120070
+        stall? 1
+Test 2 (match B): a=0x36729abc b=0x320f5678 sw2=0xac0f0074
+        stall? 0
+Test 3 (SW zero): a=0x36729abc b=0x320f5678 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=10 j=10
++-------------------------------------------+
+  instruction A: 0x36729abc
+  instruction B: 0x36729abc
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 18
+  ID_EX.rd       = 19
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 18
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x36729abc b=0x36729abc sw1=0xac120070
+        stall? 0
+Test 2 (match B): a=0x36729abc b=0x36729abc sw2=0xac120074
+        stall? 0
+Test 3 (SW zero): a=0x36729abc b=0x36729abc sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=10 j=11
++-------------------------------------------+
+  instruction A: 0x36729abc
+  instruction B: 0x02d7a82a
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 23
+  ID_EX.rd       = 21
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 18
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x36729abc b=0x02d7a82a sw1=0xac120070
+        stall? 1
+Test 2 (match B): a=0x36729abc b=0x02d7a82a sw2=0xac150074
+        stall? 0
+Test 3 (SW zero): a=0x36729abc b=0x02d7a82a sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=10 j=12
++-------------------------------------------+
+  instruction A: 0x36729abc
+  instruction B: 0x2b38ffff
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 24
+  ID_EX.rd       = 31
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 18
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x36729abc b=0x2b38ffff sw1=0xac120070
+        stall? 1
+Test 2 (match B): a=0x36729abc b=0x2b38ffff sw2=0xac180074
+        stall? 0
+Test 3 (SW zero): a=0x36729abc b=0x2b38ffff sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=10 j=13
++-------------------------------------------+
+  instruction A: 0x36729abc
+  instruction B: 0x8c1a0068
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 26
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 18
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x36729abc b=0x8c1a0068 sw1=0xac120070
+        stall? 1
+Test 2 (match B): a=0x36729abc b=0x8c1a0068 sw2=0xac1a0074
+        stall? 0
+Test 3 (SW zero): a=0x36729abc b=0x8c1a0068 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=10 j=14
++-------------------------------------------+
+  instruction A: 0x36729abc
+  instruction B: 0xac1d006c
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 0
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 29
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 18
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x36729abc b=0xac1d006c sw1=0xac120070
+        stall? 1
+Test 2 (match B): a=0x36729abc b=0xac1d006c sw2=0xac1d0074
+        stall? 0
+Test 3 (SW zero): a=0x36729abc b=0xac1d006c sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=10 j=15
++-------------------------------------------+
+  instruction A: 0x36729abc
+  instruction B: 0x00000000
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 0
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 18
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x36729abc b=0x00000000 sw1=0xac120070
+        stall? 1
+Skipping Test 2 for this instruction combination, because B appears to "write" to register zero.
+Skipping Test 3 for this instruction combination, because either A or B appear to "write" to register zero.
+
++-------------------------------------------+
+| STARTING TEST i=11 j=0
++-------------------------------------------+
+  instruction A: 0x02d7a82a
+  instruction B: 0x02328020
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 18
+  ID_EX.rd       = 16
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 21
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x02d7a82a b=0x02328020 sw1=0xac150070
+        stall? 1
+Test 2 (match B): a=0x02d7a82a b=0x02328020 sw2=0xac100074
+        stall? 0
+Test 3 (SW zero): a=0x02d7a82a b=0x02328020 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=11 j=1
++-------------------------------------------+
+  instruction A: 0x02d7a82a
+  instruction B: 0x02959822
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 21
+  ID_EX.rd       = 19
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 21
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x02d7a82a b=0x02959822 sw1=0xac150070
+        stall? 1
+Test 2 (match B): a=0x02d7a82a b=0x02959822 sw2=0xac130074
+        stall? 0
+Test 3 (SW zero): a=0x02d7a82a b=0x02959822 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=11 j=2
++-------------------------------------------+
+  instruction A: 0x02d7a82a
+  instruction B: 0x216affff
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 10
+  ID_EX.rd       = 31
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 21
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x02d7a82a b=0x216affff sw1=0xac150070
+        stall? 1
+Test 2 (match B): a=0x02d7a82a b=0x216affff sw2=0xac0a0074
+        stall? 0
+Test 3 (SW zero): a=0x02d7a82a b=0x216affff sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=11 j=3
++-------------------------------------------+
+  instruction A: 0x02d7a82a
+  instruction B: 0x21ac0010
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 12
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 21
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x02d7a82a b=0x21ac0010 sw1=0xac150070
+        stall? 1
+Test 2 (match B): a=0x02d7a82a b=0x21ac0010 sw2=0xac0c0074
+        stall? 0
+Test 3 (SW zero): a=0x02d7a82a b=0x21ac0010 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=11 j=4
++-------------------------------------------+
+  instruction A: 0x02d7a82a
+  instruction B: 0x00020821
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 2
+  ID_EX.rd       = 1
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 21
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x02d7a82a b=0x00020821 sw1=0xac150070
+        stall? 1
+Test 2 (match B): a=0x02d7a82a b=0x00020821 sw2=0xac010074
+        stall? 0
+Test 3 (SW zero): a=0x02d7a82a b=0x00020821 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=11 j=5
++-------------------------------------------+
+  instruction A: 0x02d7a82a
+  instruction B: 0x00851823
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 5
+  ID_EX.rd       = 3
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 21
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x02d7a82a b=0x00851823 sw1=0xac150070
+        stall? 1
+Test 2 (match B): a=0x02d7a82a b=0x00851823 sw2=0xac030074
+        stall? 0
+Test 3 (SW zero): a=0x02d7a82a b=0x00851823 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=11 j=6
++-------------------------------------------+
+  instruction A: 0x02d7a82a
+  instruction B: 0x24e61234
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 6
+  ID_EX.rd       = 2
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 21
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x02d7a82a b=0x24e61234 sw1=0xac150070
+        stall? 1
+Test 2 (match B): a=0x02d7a82a b=0x24e61234 sw2=0xac060074
+        stall? 0
+Test 3 (SW zero): a=0x02d7a82a b=0x24e61234 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=11 j=7
++-------------------------------------------+
+  instruction A: 0x02d7a82a
+  instruction B: 0x014b4824
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 11
+  ID_EX.rd       = 9
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 21
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x02d7a82a b=0x014b4824 sw1=0xac150070
+        stall? 1
+Test 2 (match B): a=0x02d7a82a b=0x014b4824 sw2=0xac090074
+        stall? 0
+Test 3 (SW zero): a=0x02d7a82a b=0x014b4824 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=11 j=8
++-------------------------------------------+
+  instruction A: 0x02d7a82a
+  instruction B: 0x01ae6025
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 14
+  ID_EX.rd       = 12
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 21
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x02d7a82a b=0x01ae6025 sw1=0xac150070
+        stall? 1
+Test 2 (match B): a=0x02d7a82a b=0x01ae6025 sw2=0xac0c0074
+        stall? 0
+Test 3 (SW zero): a=0x02d7a82a b=0x01ae6025 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=11 j=9
++-------------------------------------------+
+  instruction A: 0x02d7a82a
+  instruction B: 0x320f5678
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 15
+  ID_EX.rd       = 10
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 21
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x02d7a82a b=0x320f5678 sw1=0xac150070
+        stall? 1
+Test 2 (match B): a=0x02d7a82a b=0x320f5678 sw2=0xac0f0074
+        stall? 0
+Test 3 (SW zero): a=0x02d7a82a b=0x320f5678 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=11 j=10
++-------------------------------------------+
+  instruction A: 0x02d7a82a
+  instruction B: 0x36729abc
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 18
+  ID_EX.rd       = 19
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 21
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x02d7a82a b=0x36729abc sw1=0xac150070
+        stall? 1
+Test 2 (match B): a=0x02d7a82a b=0x36729abc sw2=0xac120074
+        stall? 0
+Test 3 (SW zero): a=0x02d7a82a b=0x36729abc sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=11 j=11
++-------------------------------------------+
+  instruction A: 0x02d7a82a
+  instruction B: 0x02d7a82a
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 23
+  ID_EX.rd       = 21
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 21
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x02d7a82a b=0x02d7a82a sw1=0xac150070
+        stall? 0
+Test 2 (match B): a=0x02d7a82a b=0x02d7a82a sw2=0xac150074
+        stall? 0
+Test 3 (SW zero): a=0x02d7a82a b=0x02d7a82a sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=11 j=12
++-------------------------------------------+
+  instruction A: 0x02d7a82a
+  instruction B: 0x2b38ffff
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 24
+  ID_EX.rd       = 31
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 21
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x02d7a82a b=0x2b38ffff sw1=0xac150070
+        stall? 1
+Test 2 (match B): a=0x02d7a82a b=0x2b38ffff sw2=0xac180074
+        stall? 0
+Test 3 (SW zero): a=0x02d7a82a b=0x2b38ffff sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=11 j=13
++-------------------------------------------+
+  instruction A: 0x02d7a82a
+  instruction B: 0x8c1a0068
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 26
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 21
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x02d7a82a b=0x8c1a0068 sw1=0xac150070
+        stall? 1
+Test 2 (match B): a=0x02d7a82a b=0x8c1a0068 sw2=0xac1a0074
+        stall? 0
+Test 3 (SW zero): a=0x02d7a82a b=0x8c1a0068 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=11 j=14
++-------------------------------------------+
+  instruction A: 0x02d7a82a
+  instruction B: 0xac1d006c
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 0
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 29
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 21
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x02d7a82a b=0xac1d006c sw1=0xac150070
+        stall? 1
+Test 2 (match B): a=0x02d7a82a b=0xac1d006c sw2=0xac1d0074
+        stall? 0
+Test 3 (SW zero): a=0x02d7a82a b=0xac1d006c sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=11 j=15
++-------------------------------------------+
+  instruction A: 0x02d7a82a
+  instruction B: 0x00000000
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 0
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 21
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x02d7a82a b=0x00000000 sw1=0xac150070
+        stall? 1
+Skipping Test 2 for this instruction combination, because B appears to "write" to register zero.
+Skipping Test 3 for this instruction combination, because either A or B appear to "write" to register zero.
+
++-------------------------------------------+
+| STARTING TEST i=12 j=0
++-------------------------------------------+
+  instruction A: 0x2b38ffff
+  instruction B: 0x02328020
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 18
+  ID_EX.rd       = 16
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 24
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x2b38ffff b=0x02328020 sw1=0xac180070
+        stall? 1
+Test 2 (match B): a=0x2b38ffff b=0x02328020 sw2=0xac100074
+        stall? 0
+Test 3 (SW zero): a=0x2b38ffff b=0x02328020 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=12 j=1
++-------------------------------------------+
+  instruction A: 0x2b38ffff
+  instruction B: 0x02959822
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 21
+  ID_EX.rd       = 19
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 24
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x2b38ffff b=0x02959822 sw1=0xac180070
+        stall? 1
+Test 2 (match B): a=0x2b38ffff b=0x02959822 sw2=0xac130074
+        stall? 0
+Test 3 (SW zero): a=0x2b38ffff b=0x02959822 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=12 j=2
++-------------------------------------------+
+  instruction A: 0x2b38ffff
+  instruction B: 0x216affff
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 10
+  ID_EX.rd       = 31
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 24
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x2b38ffff b=0x216affff sw1=0xac180070
+        stall? 1
+Test 2 (match B): a=0x2b38ffff b=0x216affff sw2=0xac0a0074
+        stall? 0
+Test 3 (SW zero): a=0x2b38ffff b=0x216affff sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=12 j=3
++-------------------------------------------+
+  instruction A: 0x2b38ffff
+  instruction B: 0x21ac0010
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 12
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 24
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x2b38ffff b=0x21ac0010 sw1=0xac180070
+        stall? 1
+Test 2 (match B): a=0x2b38ffff b=0x21ac0010 sw2=0xac0c0074
+        stall? 0
+Test 3 (SW zero): a=0x2b38ffff b=0x21ac0010 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=12 j=4
++-------------------------------------------+
+  instruction A: 0x2b38ffff
+  instruction B: 0x00020821
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 2
+  ID_EX.rd       = 1
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 24
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x2b38ffff b=0x00020821 sw1=0xac180070
+        stall? 1
+Test 2 (match B): a=0x2b38ffff b=0x00020821 sw2=0xac010074
+        stall? 0
+Test 3 (SW zero): a=0x2b38ffff b=0x00020821 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=12 j=5
++-------------------------------------------+
+  instruction A: 0x2b38ffff
+  instruction B: 0x00851823
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 5
+  ID_EX.rd       = 3
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 24
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x2b38ffff b=0x00851823 sw1=0xac180070
+        stall? 1
+Test 2 (match B): a=0x2b38ffff b=0x00851823 sw2=0xac030074
+        stall? 0
+Test 3 (SW zero): a=0x2b38ffff b=0x00851823 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=12 j=6
++-------------------------------------------+
+  instruction A: 0x2b38ffff
+  instruction B: 0x24e61234
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 6
+  ID_EX.rd       = 2
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 24
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x2b38ffff b=0x24e61234 sw1=0xac180070
+        stall? 1
+Test 2 (match B): a=0x2b38ffff b=0x24e61234 sw2=0xac060074
+        stall? 0
+Test 3 (SW zero): a=0x2b38ffff b=0x24e61234 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=12 j=7
++-------------------------------------------+
+  instruction A: 0x2b38ffff
+  instruction B: 0x014b4824
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 11
+  ID_EX.rd       = 9
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 24
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x2b38ffff b=0x014b4824 sw1=0xac180070
+        stall? 1
+Test 2 (match B): a=0x2b38ffff b=0x014b4824 sw2=0xac090074
+        stall? 0
+Test 3 (SW zero): a=0x2b38ffff b=0x014b4824 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=12 j=8
++-------------------------------------------+
+  instruction A: 0x2b38ffff
+  instruction B: 0x01ae6025
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 14
+  ID_EX.rd       = 12
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 24
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x2b38ffff b=0x01ae6025 sw1=0xac180070
+        stall? 1
+Test 2 (match B): a=0x2b38ffff b=0x01ae6025 sw2=0xac0c0074
+        stall? 0
+Test 3 (SW zero): a=0x2b38ffff b=0x01ae6025 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=12 j=9
++-------------------------------------------+
+  instruction A: 0x2b38ffff
+  instruction B: 0x320f5678
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 15
+  ID_EX.rd       = 10
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 24
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x2b38ffff b=0x320f5678 sw1=0xac180070
+        stall? 1
+Test 2 (match B): a=0x2b38ffff b=0x320f5678 sw2=0xac0f0074
+        stall? 0
+Test 3 (SW zero): a=0x2b38ffff b=0x320f5678 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=12 j=10
++-------------------------------------------+
+  instruction A: 0x2b38ffff
+  instruction B: 0x36729abc
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 18
+  ID_EX.rd       = 19
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 24
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x2b38ffff b=0x36729abc sw1=0xac180070
+        stall? 1
+Test 2 (match B): a=0x2b38ffff b=0x36729abc sw2=0xac120074
+        stall? 0
+Test 3 (SW zero): a=0x2b38ffff b=0x36729abc sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=12 j=11
++-------------------------------------------+
+  instruction A: 0x2b38ffff
+  instruction B: 0x02d7a82a
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 23
+  ID_EX.rd       = 21
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 24
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x2b38ffff b=0x02d7a82a sw1=0xac180070
+        stall? 1
+Test 2 (match B): a=0x2b38ffff b=0x02d7a82a sw2=0xac150074
+        stall? 0
+Test 3 (SW zero): a=0x2b38ffff b=0x02d7a82a sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=12 j=12
++-------------------------------------------+
+  instruction A: 0x2b38ffff
+  instruction B: 0x2b38ffff
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 24
+  ID_EX.rd       = 31
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 24
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x2b38ffff b=0x2b38ffff sw1=0xac180070
+        stall? 0
+Test 2 (match B): a=0x2b38ffff b=0x2b38ffff sw2=0xac180074
+        stall? 0
+Test 3 (SW zero): a=0x2b38ffff b=0x2b38ffff sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=12 j=13
++-------------------------------------------+
+  instruction A: 0x2b38ffff
+  instruction B: 0x8c1a0068
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 26
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 24
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x2b38ffff b=0x8c1a0068 sw1=0xac180070
+        stall? 1
+Test 2 (match B): a=0x2b38ffff b=0x8c1a0068 sw2=0xac1a0074
+        stall? 0
+Test 3 (SW zero): a=0x2b38ffff b=0x8c1a0068 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=12 j=14
++-------------------------------------------+
+  instruction A: 0x2b38ffff
+  instruction B: 0xac1d006c
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 0
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 29
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 24
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x2b38ffff b=0xac1d006c sw1=0xac180070
+        stall? 1
+Test 2 (match B): a=0x2b38ffff b=0xac1d006c sw2=0xac1d0074
+        stall? 0
+Test 3 (SW zero): a=0x2b38ffff b=0xac1d006c sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=12 j=15
++-------------------------------------------+
+  instruction A: 0x2b38ffff
+  instruction B: 0x00000000
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 0
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 24
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x2b38ffff b=0x00000000 sw1=0xac180070
+        stall? 1
+Skipping Test 2 for this instruction combination, because B appears to "write" to register zero.
+Skipping Test 3 for this instruction combination, because either A or B appear to "write" to register zero.
+
++-------------------------------------------+
+| STARTING TEST i=13 j=0
++-------------------------------------------+
+  instruction A: 0x8c1a0068
+  instruction B: 0x02328020
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 18
+  ID_EX.rd       = 16
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 26
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x8c1a0068 b=0x02328020 sw1=0xac1a0070
+        stall? 1
+Test 2 (match B): a=0x8c1a0068 b=0x02328020 sw2=0xac100074
+        stall? 0
+Test 3 (SW zero): a=0x8c1a0068 b=0x02328020 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=13 j=1
++-------------------------------------------+
+  instruction A: 0x8c1a0068
+  instruction B: 0x02959822
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 21
+  ID_EX.rd       = 19
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 26
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x8c1a0068 b=0x02959822 sw1=0xac1a0070
+        stall? 1
+Test 2 (match B): a=0x8c1a0068 b=0x02959822 sw2=0xac130074
+        stall? 0
+Test 3 (SW zero): a=0x8c1a0068 b=0x02959822 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=13 j=2
++-------------------------------------------+
+  instruction A: 0x8c1a0068
+  instruction B: 0x216affff
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 10
+  ID_EX.rd       = 31
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 26
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x8c1a0068 b=0x216affff sw1=0xac1a0070
+        stall? 1
+Test 2 (match B): a=0x8c1a0068 b=0x216affff sw2=0xac0a0074
+        stall? 0
+Test 3 (SW zero): a=0x8c1a0068 b=0x216affff sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=13 j=3
++-------------------------------------------+
+  instruction A: 0x8c1a0068
+  instruction B: 0x21ac0010
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 12
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 26
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x8c1a0068 b=0x21ac0010 sw1=0xac1a0070
+        stall? 1
+Test 2 (match B): a=0x8c1a0068 b=0x21ac0010 sw2=0xac0c0074
+        stall? 0
+Test 3 (SW zero): a=0x8c1a0068 b=0x21ac0010 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=13 j=4
++-------------------------------------------+
+  instruction A: 0x8c1a0068
+  instruction B: 0x00020821
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 2
+  ID_EX.rd       = 1
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 26
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x8c1a0068 b=0x00020821 sw1=0xac1a0070
+        stall? 1
+Test 2 (match B): a=0x8c1a0068 b=0x00020821 sw2=0xac010074
+        stall? 0
+Test 3 (SW zero): a=0x8c1a0068 b=0x00020821 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=13 j=5
++-------------------------------------------+
+  instruction A: 0x8c1a0068
+  instruction B: 0x00851823
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 5
+  ID_EX.rd       = 3
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 26
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x8c1a0068 b=0x00851823 sw1=0xac1a0070
+        stall? 1
+Test 2 (match B): a=0x8c1a0068 b=0x00851823 sw2=0xac030074
+        stall? 0
+Test 3 (SW zero): a=0x8c1a0068 b=0x00851823 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=13 j=6
++-------------------------------------------+
+  instruction A: 0x8c1a0068
+  instruction B: 0x24e61234
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 6
+  ID_EX.rd       = 2
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 26
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x8c1a0068 b=0x24e61234 sw1=0xac1a0070
+        stall? 1
+Test 2 (match B): a=0x8c1a0068 b=0x24e61234 sw2=0xac060074
+        stall? 0
+Test 3 (SW zero): a=0x8c1a0068 b=0x24e61234 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=13 j=7
++-------------------------------------------+
+  instruction A: 0x8c1a0068
+  instruction B: 0x014b4824
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 11
+  ID_EX.rd       = 9
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 26
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x8c1a0068 b=0x014b4824 sw1=0xac1a0070
+        stall? 1
+Test 2 (match B): a=0x8c1a0068 b=0x014b4824 sw2=0xac090074
+        stall? 0
+Test 3 (SW zero): a=0x8c1a0068 b=0x014b4824 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=13 j=8
++-------------------------------------------+
+  instruction A: 0x8c1a0068
+  instruction B: 0x01ae6025
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 14
+  ID_EX.rd       = 12
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 26
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x8c1a0068 b=0x01ae6025 sw1=0xac1a0070
+        stall? 1
+Test 2 (match B): a=0x8c1a0068 b=0x01ae6025 sw2=0xac0c0074
+        stall? 0
+Test 3 (SW zero): a=0x8c1a0068 b=0x01ae6025 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=13 j=9
++-------------------------------------------+
+  instruction A: 0x8c1a0068
+  instruction B: 0x320f5678
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 15
+  ID_EX.rd       = 10
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 26
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x8c1a0068 b=0x320f5678 sw1=0xac1a0070
+        stall? 1
+Test 2 (match B): a=0x8c1a0068 b=0x320f5678 sw2=0xac0f0074
+        stall? 0
+Test 3 (SW zero): a=0x8c1a0068 b=0x320f5678 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=13 j=10
++-------------------------------------------+
+  instruction A: 0x8c1a0068
+  instruction B: 0x36729abc
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 18
+  ID_EX.rd       = 19
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 26
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x8c1a0068 b=0x36729abc sw1=0xac1a0070
+        stall? 1
+Test 2 (match B): a=0x8c1a0068 b=0x36729abc sw2=0xac120074
+        stall? 0
+Test 3 (SW zero): a=0x8c1a0068 b=0x36729abc sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=13 j=11
++-------------------------------------------+
+  instruction A: 0x8c1a0068
+  instruction B: 0x02d7a82a
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 23
+  ID_EX.rd       = 21
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 26
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x8c1a0068 b=0x02d7a82a sw1=0xac1a0070
+        stall? 1
+Test 2 (match B): a=0x8c1a0068 b=0x02d7a82a sw2=0xac150074
+        stall? 0
+Test 3 (SW zero): a=0x8c1a0068 b=0x02d7a82a sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=13 j=12
++-------------------------------------------+
+  instruction A: 0x8c1a0068
+  instruction B: 0x2b38ffff
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 24
+  ID_EX.rd       = 31
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 26
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x8c1a0068 b=0x2b38ffff sw1=0xac1a0070
+        stall? 1
+Test 2 (match B): a=0x8c1a0068 b=0x2b38ffff sw2=0xac180074
+        stall? 0
+Test 3 (SW zero): a=0x8c1a0068 b=0x2b38ffff sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=13 j=13
++-------------------------------------------+
+  instruction A: 0x8c1a0068
+  instruction B: 0x8c1a0068
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 26
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 26
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x8c1a0068 b=0x8c1a0068 sw1=0xac1a0070
+        stall? 0
+Test 2 (match B): a=0x8c1a0068 b=0x8c1a0068 sw2=0xac1a0074
+        stall? 0
+Test 3 (SW zero): a=0x8c1a0068 b=0x8c1a0068 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=13 j=14
++-------------------------------------------+
+  instruction A: 0x8c1a0068
+  instruction B: 0xac1d006c
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 0
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 29
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 26
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x8c1a0068 b=0xac1d006c sw1=0xac1a0070
+        stall? 1
+Test 2 (match B): a=0x8c1a0068 b=0xac1d006c sw2=0xac1d0074
+        stall? 0
+Test 3 (SW zero): a=0x8c1a0068 b=0xac1d006c sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=13 j=15
++-------------------------------------------+
+  instruction A: 0x8c1a0068
+  instruction B: 0x00000000
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 0
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 26
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0x8c1a0068 b=0x00000000 sw1=0xac1a0070
+        stall? 1
+Skipping Test 2 for this instruction combination, because B appears to "write" to register zero.
+Skipping Test 3 for this instruction combination, because either A or B appear to "write" to register zero.
+
++-------------------------------------------+
+| STARTING TEST i=14 j=0
++-------------------------------------------+
+  instruction A: 0xac1d006c
+  instruction B: 0x02328020
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 18
+  ID_EX.rd       = 16
+  --
+  EX_MEM.regWrite = 0
+  EX_MEM.writeReg = 29
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0xac1d006c b=0x02328020 sw1=0xac1d0070
+        stall? 0
+Test 2 (match B): a=0xac1d006c b=0x02328020 sw2=0xac100074
+        stall? 0
+Test 3 (SW zero): a=0xac1d006c b=0x02328020 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=14 j=1
++-------------------------------------------+
+  instruction A: 0xac1d006c
+  instruction B: 0x02959822
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 21
+  ID_EX.rd       = 19
+  --
+  EX_MEM.regWrite = 0
+  EX_MEM.writeReg = 29
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0xac1d006c b=0x02959822 sw1=0xac1d0070
+        stall? 0
+Test 2 (match B): a=0xac1d006c b=0x02959822 sw2=0xac130074
+        stall? 0
+Test 3 (SW zero): a=0xac1d006c b=0x02959822 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=14 j=2
++-------------------------------------------+
+  instruction A: 0xac1d006c
+  instruction B: 0x216affff
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 10
+  ID_EX.rd       = 31
+  --
+  EX_MEM.regWrite = 0
+  EX_MEM.writeReg = 29
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0xac1d006c b=0x216affff sw1=0xac1d0070
+        stall? 0
+Test 2 (match B): a=0xac1d006c b=0x216affff sw2=0xac0a0074
+        stall? 0
+Test 3 (SW zero): a=0xac1d006c b=0x216affff sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=14 j=3
++-------------------------------------------+
+  instruction A: 0xac1d006c
+  instruction B: 0x21ac0010
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 12
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 0
+  EX_MEM.writeReg = 29
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0xac1d006c b=0x21ac0010 sw1=0xac1d0070
+        stall? 0
+Test 2 (match B): a=0xac1d006c b=0x21ac0010 sw2=0xac0c0074
+        stall? 0
+Test 3 (SW zero): a=0xac1d006c b=0x21ac0010 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=14 j=4
++-------------------------------------------+
+  instruction A: 0xac1d006c
+  instruction B: 0x00020821
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 2
+  ID_EX.rd       = 1
+  --
+  EX_MEM.regWrite = 0
+  EX_MEM.writeReg = 29
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0xac1d006c b=0x00020821 sw1=0xac1d0070
+        stall? 0
+Test 2 (match B): a=0xac1d006c b=0x00020821 sw2=0xac010074
+        stall? 0
+Test 3 (SW zero): a=0xac1d006c b=0x00020821 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=14 j=5
++-------------------------------------------+
+  instruction A: 0xac1d006c
+  instruction B: 0x00851823
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 5
+  ID_EX.rd       = 3
+  --
+  EX_MEM.regWrite = 0
+  EX_MEM.writeReg = 29
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0xac1d006c b=0x00851823 sw1=0xac1d0070
+        stall? 0
+Test 2 (match B): a=0xac1d006c b=0x00851823 sw2=0xac030074
+        stall? 0
+Test 3 (SW zero): a=0xac1d006c b=0x00851823 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=14 j=6
++-------------------------------------------+
+  instruction A: 0xac1d006c
+  instruction B: 0x24e61234
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 6
+  ID_EX.rd       = 2
+  --
+  EX_MEM.regWrite = 0
+  EX_MEM.writeReg = 29
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0xac1d006c b=0x24e61234 sw1=0xac1d0070
+        stall? 0
+Test 2 (match B): a=0xac1d006c b=0x24e61234 sw2=0xac060074
+        stall? 0
+Test 3 (SW zero): a=0xac1d006c b=0x24e61234 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=14 j=7
++-------------------------------------------+
+  instruction A: 0xac1d006c
+  instruction B: 0x014b4824
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 11
+  ID_EX.rd       = 9
+  --
+  EX_MEM.regWrite = 0
+  EX_MEM.writeReg = 29
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0xac1d006c b=0x014b4824 sw1=0xac1d0070
+        stall? 0
+Test 2 (match B): a=0xac1d006c b=0x014b4824 sw2=0xac090074
+        stall? 0
+Test 3 (SW zero): a=0xac1d006c b=0x014b4824 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=14 j=8
++-------------------------------------------+
+  instruction A: 0xac1d006c
+  instruction B: 0x01ae6025
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 14
+  ID_EX.rd       = 12
+  --
+  EX_MEM.regWrite = 0
+  EX_MEM.writeReg = 29
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0xac1d006c b=0x01ae6025 sw1=0xac1d0070
+        stall? 0
+Test 2 (match B): a=0xac1d006c b=0x01ae6025 sw2=0xac0c0074
+        stall? 0
+Test 3 (SW zero): a=0xac1d006c b=0x01ae6025 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=14 j=9
++-------------------------------------------+
+  instruction A: 0xac1d006c
+  instruction B: 0x320f5678
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 15
+  ID_EX.rd       = 10
+  --
+  EX_MEM.regWrite = 0
+  EX_MEM.writeReg = 29
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0xac1d006c b=0x320f5678 sw1=0xac1d0070
+        stall? 0
+Test 2 (match B): a=0xac1d006c b=0x320f5678 sw2=0xac0f0074
+        stall? 0
+Test 3 (SW zero): a=0xac1d006c b=0x320f5678 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=14 j=10
++-------------------------------------------+
+  instruction A: 0xac1d006c
+  instruction B: 0x36729abc
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 18
+  ID_EX.rd       = 19
+  --
+  EX_MEM.regWrite = 0
+  EX_MEM.writeReg = 29
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0xac1d006c b=0x36729abc sw1=0xac1d0070
+        stall? 0
+Test 2 (match B): a=0xac1d006c b=0x36729abc sw2=0xac120074
+        stall? 0
+Test 3 (SW zero): a=0xac1d006c b=0x36729abc sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=14 j=11
++-------------------------------------------+
+  instruction A: 0xac1d006c
+  instruction B: 0x02d7a82a
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 23
+  ID_EX.rd       = 21
+  --
+  EX_MEM.regWrite = 0
+  EX_MEM.writeReg = 29
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0xac1d006c b=0x02d7a82a sw1=0xac1d0070
+        stall? 0
+Test 2 (match B): a=0xac1d006c b=0x02d7a82a sw2=0xac150074
+        stall? 0
+Test 3 (SW zero): a=0xac1d006c b=0x02d7a82a sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=14 j=12
++-------------------------------------------+
+  instruction A: 0xac1d006c
+  instruction B: 0x2b38ffff
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 24
+  ID_EX.rd       = 31
+  --
+  EX_MEM.regWrite = 0
+  EX_MEM.writeReg = 29
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0xac1d006c b=0x2b38ffff sw1=0xac1d0070
+        stall? 0
+Test 2 (match B): a=0xac1d006c b=0x2b38ffff sw2=0xac180074
+        stall? 0
+Test 3 (SW zero): a=0xac1d006c b=0x2b38ffff sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=14 j=13
++-------------------------------------------+
+  instruction A: 0xac1d006c
+  instruction B: 0x8c1a0068
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 26
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 0
+  EX_MEM.writeReg = 29
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0xac1d006c b=0x8c1a0068 sw1=0xac1d0070
+        stall? 0
+Test 2 (match B): a=0xac1d006c b=0x8c1a0068 sw2=0xac1a0074
+        stall? 0
+Test 3 (SW zero): a=0xac1d006c b=0x8c1a0068 sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=14 j=14
++-------------------------------------------+
+  instruction A: 0xac1d006c
+  instruction B: 0xac1d006c
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 0
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 29
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 0
+  EX_MEM.writeReg = 29
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0xac1d006c b=0xac1d006c sw1=0xac1d0070
+        stall? 0
+Test 2 (match B): a=0xac1d006c b=0xac1d006c sw2=0xac1d0074
+        stall? 0
+Test 3 (SW zero): a=0xac1d006c b=0xac1d006c sw3=0xac000078
+        stall? 0
+
++-------------------------------------------+
+| STARTING TEST i=14 j=15
++-------------------------------------------+
+  instruction A: 0xac1d006c
+  instruction B: 0x00000000
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 0
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 0
+  EX_MEM.writeReg = 29
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Test 1 (match A): a=0xac1d006c b=0x00000000 sw1=0xac1d0070
+        stall? 0
+Skipping Test 2 for this instruction combination, because B appears to "write" to register zero.
+Skipping Test 3 for this instruction combination, because either A or B appear to "write" to register zero.
+
++-------------------------------------------+
+| STARTING TEST i=15 j=0
++-------------------------------------------+
+  instruction A: 0x00000000
+  instruction B: 0x02328020
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 18
+  ID_EX.rd       = 16
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 0
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Skipping Test 1 for this instruction combination, because A appears to "write" to register zero.
+Test 2 (match B): a=0x00000000 b=0x02328020 sw2=0xac100074
+        stall? 0
+Skipping Test 3 for this instruction combination, because either A or B appear to "write" to register zero.
+
++-------------------------------------------+
+| STARTING TEST i=15 j=1
++-------------------------------------------+
+  instruction A: 0x00000000
+  instruction B: 0x02959822
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 21
+  ID_EX.rd       = 19
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 0
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Skipping Test 1 for this instruction combination, because A appears to "write" to register zero.
+Test 2 (match B): a=0x00000000 b=0x02959822 sw2=0xac130074
+        stall? 0
+Skipping Test 3 for this instruction combination, because either A or B appear to "write" to register zero.
+
++-------------------------------------------+
+| STARTING TEST i=15 j=2
++-------------------------------------------+
+  instruction A: 0x00000000
+  instruction B: 0x216affff
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 10
+  ID_EX.rd       = 31
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 0
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Skipping Test 1 for this instruction combination, because A appears to "write" to register zero.
+Test 2 (match B): a=0x00000000 b=0x216affff sw2=0xac0a0074
+        stall? 0
+Skipping Test 3 for this instruction combination, because either A or B appear to "write" to register zero.
+
++-------------------------------------------+
+| STARTING TEST i=15 j=3
++-------------------------------------------+
+  instruction A: 0x00000000
+  instruction B: 0x21ac0010
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 12
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 0
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Skipping Test 1 for this instruction combination, because A appears to "write" to register zero.
+Test 2 (match B): a=0x00000000 b=0x21ac0010 sw2=0xac0c0074
+        stall? 0
+Skipping Test 3 for this instruction combination, because either A or B appear to "write" to register zero.
+
++-------------------------------------------+
+| STARTING TEST i=15 j=4
++-------------------------------------------+
+  instruction A: 0x00000000
+  instruction B: 0x00020821
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 2
+  ID_EX.rd       = 1
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 0
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Skipping Test 1 for this instruction combination, because A appears to "write" to register zero.
+Test 2 (match B): a=0x00000000 b=0x00020821 sw2=0xac010074
+        stall? 0
+Skipping Test 3 for this instruction combination, because either A or B appear to "write" to register zero.
+
++-------------------------------------------+
+| STARTING TEST i=15 j=5
++-------------------------------------------+
+  instruction A: 0x00000000
+  instruction B: 0x00851823
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 5
+  ID_EX.rd       = 3
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 0
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Skipping Test 1 for this instruction combination, because A appears to "write" to register zero.
+Test 2 (match B): a=0x00000000 b=0x00851823 sw2=0xac030074
+        stall? 0
+Skipping Test 3 for this instruction combination, because either A or B appear to "write" to register zero.
+
++-------------------------------------------+
+| STARTING TEST i=15 j=6
++-------------------------------------------+
+  instruction A: 0x00000000
+  instruction B: 0x24e61234
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 6
+  ID_EX.rd       = 2
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 0
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Skipping Test 1 for this instruction combination, because A appears to "write" to register zero.
+Test 2 (match B): a=0x00000000 b=0x24e61234 sw2=0xac060074
+        stall? 0
+Skipping Test 3 for this instruction combination, because either A or B appear to "write" to register zero.
+
++-------------------------------------------+
+| STARTING TEST i=15 j=7
++-------------------------------------------+
+  instruction A: 0x00000000
+  instruction B: 0x014b4824
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 11
+  ID_EX.rd       = 9
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 0
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Skipping Test 1 for this instruction combination, because A appears to "write" to register zero.
+Test 2 (match B): a=0x00000000 b=0x014b4824 sw2=0xac090074
+        stall? 0
+Skipping Test 3 for this instruction combination, because either A or B appear to "write" to register zero.
+
++-------------------------------------------+
+| STARTING TEST i=15 j=8
++-------------------------------------------+
+  instruction A: 0x00000000
+  instruction B: 0x01ae6025
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 14
+  ID_EX.rd       = 12
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 0
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Skipping Test 1 for this instruction combination, because A appears to "write" to register zero.
+Test 2 (match B): a=0x00000000 b=0x01ae6025 sw2=0xac0c0074
+        stall? 0
+Skipping Test 3 for this instruction combination, because either A or B appear to "write" to register zero.
+
++-------------------------------------------+
+| STARTING TEST i=15 j=9
++-------------------------------------------+
+  instruction A: 0x00000000
+  instruction B: 0x320f5678
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 15
+  ID_EX.rd       = 10
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 0
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Skipping Test 1 for this instruction combination, because A appears to "write" to register zero.
+Test 2 (match B): a=0x00000000 b=0x320f5678 sw2=0xac0f0074
+        stall? 0
+Skipping Test 3 for this instruction combination, because either A or B appear to "write" to register zero.
+
++-------------------------------------------+
+| STARTING TEST i=15 j=10
++-------------------------------------------+
+  instruction A: 0x00000000
+  instruction B: 0x36729abc
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 18
+  ID_EX.rd       = 19
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 0
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Skipping Test 1 for this instruction combination, because A appears to "write" to register zero.
+Test 2 (match B): a=0x00000000 b=0x36729abc sw2=0xac120074
+        stall? 0
+Skipping Test 3 for this instruction combination, because either A or B appear to "write" to register zero.
+
++-------------------------------------------+
+| STARTING TEST i=15 j=11
++-------------------------------------------+
+  instruction A: 0x00000000
+  instruction B: 0x02d7a82a
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 23
+  ID_EX.rd       = 21
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 0
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Skipping Test 1 for this instruction combination, because A appears to "write" to register zero.
+Test 2 (match B): a=0x00000000 b=0x02d7a82a sw2=0xac150074
+        stall? 0
+Skipping Test 3 for this instruction combination, because either A or B appear to "write" to register zero.
+
++-------------------------------------------+
+| STARTING TEST i=15 j=12
++-------------------------------------------+
+  instruction A: 0x00000000
+  instruction B: 0x2b38ffff
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 24
+  ID_EX.rd       = 31
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 0
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Skipping Test 1 for this instruction combination, because A appears to "write" to register zero.
+Test 2 (match B): a=0x00000000 b=0x2b38ffff sw2=0xac180074
+        stall? 0
+Skipping Test 3 for this instruction combination, because either A or B appear to "write" to register zero.
+
++-------------------------------------------+
+| STARTING TEST i=15 j=13
++-------------------------------------------+
+  instruction A: 0x00000000
+  instruction B: 0x8c1a0068
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 26
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 0
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Skipping Test 1 for this instruction combination, because A appears to "write" to register zero.
+Test 2 (match B): a=0x00000000 b=0x8c1a0068 sw2=0xac1a0074
+        stall? 0
+Skipping Test 3 for this instruction combination, because either A or B appear to "write" to register zero.
+
++-------------------------------------------+
+| STARTING TEST i=15 j=14
++-------------------------------------------+
+  instruction A: 0x00000000
+  instruction B: 0xac1d006c
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 0
+  ID_EX.regDst   = 0
+  ID_EX.rt       = 29
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 0
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Skipping Test 1 for this instruction combination, because A appears to "write" to register zero.
+Test 2 (match B): a=0x00000000 b=0xac1d006c sw2=0xac1d0074
+        stall? 0
+Skipping Test 3 for this instruction combination, because either A or B appear to "write" to register zero.
+
++-------------------------------------------+
+| STARTING TEST i=15 j=15
++-------------------------------------------+
+  instruction A: 0x00000000
+  instruction B: 0x00000000
+
+Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:
+  ID_EX.regWrite = 1
+  ID_EX.regDst   = 1
+  ID_EX.rt       = 0
+  ID_EX.rd       = 0
+  --
+  EX_MEM.regWrite = 1
+  EX_MEM.writeReg = 0
+
+The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.
+
+Skipping Test 1 for this instruction combination, because A appears to "write" to register zero.
+Skipping Test 2 for this instruction combination, because B appears to "write" to register zero.
+Skipping Test 3 for this instruction combination, because either A or B appear to "write" to register zero.
+
Index: ../Sim5/src/Test14LUI.out
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Sim5/src/Test14LUI.out b/../Sim5/src/Test14LUI.out
new file mode 100644
--- /dev/null	(date 1744661109409)
+++ b/../Sim5/src/Test14LUI.out	(date 1744661109409)
@@ -0,0 +1,9 @@
+1234
+5678
+1111
+2222
+65536
+1114112
+65536000
+80871424
+--- syscall 10 executed: Normal termination of the assembly language program.
Index: ../Sim5/src/Test11Syscalls.out
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Sim5/src/Test11Syscalls.out b/../Sim5/src/Test11Syscalls.out
new file mode 100644
--- /dev/null	(date 1744661109408)
+++ b/../Sim5/src/Test11Syscalls.out	(date 1744661109408)
@@ -0,0 +1,3 @@
+123412345678
+TEST STRING
+--- syscall 10 executed: Normal termination of the assembly language program.
Index: ../Sim5/src/Test16NOR.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Sim5/src/Test16NOR.java b/../Sim5/src/Test16NOR.java
new file mode 100644
--- /dev/null	(date 1744661109409)
+++ b/../Sim5/src/Test16NOR.java	(date 1744661109409)
@@ -0,0 +1,166 @@
+// Test16NOR.java
+public class Test16NOR {
+    public static void main(String[] args) {
+        final int CODE_SIZE = 16 * 1024;
+        final int DATA_SIZE = 16 * 1024;
+        
+        int[] regs = new int[34];
+        int[] instMemory = new int[CODE_SIZE];
+        int[] dataMemory = new int[DATA_SIZE];
+
+        // Initialize registers and data memory
+        for (int i = 0; i < 34; i++) {
+            regs[i] = 0x01010101 * i;
+        }
+        for (int i = 0; i < dataMemory.length; i++) {
+            dataMemory[i] = 0xffff0000 + (i * 4);
+        }
+
+        int codeOffset = 0x12340000;
+
+        // Initialize instructions
+        // addi $t0, $zero, 1234
+        instMemory[0] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.T_REG(0), Sim5TestCommonCode.REG_ZERO(), 1234);
+        // addi $t1, $zero, 5678
+        instMemory[1] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.T_REG(1), Sim5TestCommonCode.REG_ZERO(), 5678);
+        // addi $t2, $zero, 1111
+        instMemory[2] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.T_REG(2), Sim5TestCommonCode.REG_ZERO(), 1111);
+        // addi $t3, $zero, 2222
+        instMemory[3] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.T_REG(3), Sim5TestCommonCode.REG_ZERO(), 2222);
+
+        // NOR instructions
+        // nor $s0, $t0,$t1
+        instMemory[4] = Sim5TestCommonCode.NOR(Sim5TestCommonCode.S_REG(0), Sim5TestCommonCode.T_REG(0), Sim5TestCommonCode.T_REG(1));
+        // nor $s1, $t2,$t3
+        instMemory[5] = Sim5TestCommonCode.NOR(Sim5TestCommonCode.S_REG(1), Sim5TestCommonCode.T_REG(2), Sim5TestCommonCode.T_REG(3));
+        // nor $s2, $t2,$t1
+        instMemory[6] = Sim5TestCommonCode.NOR(Sim5TestCommonCode.S_REG(2), Sim5TestCommonCode.T_REG(2), Sim5TestCommonCode.T_REG(1));
+        // nor $s3, $t3,$t0
+        instMemory[7] = Sim5TestCommonCode.NOR(Sim5TestCommonCode.S_REG(3), Sim5TestCommonCode.T_REG(3), Sim5TestCommonCode.T_REG(0));
+
+        // Print sequence (t0-t3, s0-s3)
+        // print_int(t0)
+        instMemory[8] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 1);
+        instMemory[9] = Sim5TestCommonCode.ADD(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.T_REG(0), Sim5TestCommonCode.REG_ZERO());
+        instMemory[10] = Sim5TestCommonCode.NOP();
+        instMemory[11] = Sim5TestCommonCode.NOP();
+        instMemory[12] = Sim5TestCommonCode.SYSCALL();
+
+        // print_char('\n')
+        instMemory[13] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 11);
+        instMemory[14] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.REG_ZERO(), 0xa);
+        instMemory[15] = Sim5TestCommonCode.NOP();
+        instMemory[16] = Sim5TestCommonCode.NOP();
+        instMemory[17] = Sim5TestCommonCode.SYSCALL();
+
+        // print_int(t1)
+        instMemory[18] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 1);
+        instMemory[19] = Sim5TestCommonCode.ADD(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.T_REG(1), Sim5TestCommonCode.REG_ZERO());
+        instMemory[20] = Sim5TestCommonCode.NOP();
+        instMemory[21] = Sim5TestCommonCode.NOP();
+        instMemory[22] = Sim5TestCommonCode.SYSCALL();
+
+        // print_char('\n')
+        instMemory[23] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 11);
+        instMemory[24] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.REG_ZERO(), 0xa);
+        instMemory[25] = Sim5TestCommonCode.NOP();
+        instMemory[26] = Sim5TestCommonCode.NOP();
+        instMemory[27] = Sim5TestCommonCode.SYSCALL();
+
+        // print_int(t2)
+        instMemory[28] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 1);
+        instMemory[29] = Sim5TestCommonCode.ADD(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.T_REG(2), Sim5TestCommonCode.REG_ZERO());
+        instMemory[30] = Sim5TestCommonCode.NOP();
+        instMemory[31] = Sim5TestCommonCode.NOP();
+        instMemory[32] = Sim5TestCommonCode.SYSCALL();
+
+        // print_char('\n')
+        instMemory[33] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 11);
+        instMemory[34] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.REG_ZERO(), 0xa);
+        instMemory[35] = Sim5TestCommonCode.NOP();
+        instMemory[36] = Sim5TestCommonCode.NOP();
+        instMemory[37] = Sim5TestCommonCode.SYSCALL();
+
+        // print_int(t3)
+        instMemory[38] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 1);
+        instMemory[39] = Sim5TestCommonCode.ADD(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.T_REG(3), Sim5TestCommonCode.REG_ZERO());
+        instMemory[40] = Sim5TestCommonCode.NOP();
+        instMemory[41] = Sim5TestCommonCode.NOP();
+        instMemory[42] = Sim5TestCommonCode.SYSCALL();
+
+        // print_char('\n')
+        instMemory[43] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 11);
+        instMemory[44] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.REG_ZERO(), 0xa);
+        instMemory[45] = Sim5TestCommonCode.NOP();
+        instMemory[46] = Sim5TestCommonCode.NOP();
+        instMemory[47] = Sim5TestCommonCode.SYSCALL();
+
+        // print_int(s0)
+        instMemory[48] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 1);
+        instMemory[49] = Sim5TestCommonCode.ADD(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.S_REG(0), Sim5TestCommonCode.REG_ZERO());
+        instMemory[50] = Sim5TestCommonCode.NOP();
+        instMemory[51] = Sim5TestCommonCode.NOP();
+        instMemory[52] = Sim5TestCommonCode.SYSCALL();
+
+        // print_char('\n')
+        instMemory[53] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 11);
+        instMemory[54] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.REG_ZERO(), 0xa);
+        instMemory[55] = Sim5TestCommonCode.NOP();
+        instMemory[56] = Sim5TestCommonCode.NOP();
+        instMemory[57] = Sim5TestCommonCode.SYSCALL();
+
+        // print_int(s1)
+        instMemory[58] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 1);
+        instMemory[59] = Sim5TestCommonCode.ADD(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.S_REG(1), Sim5TestCommonCode.REG_ZERO());
+        instMemory[60] = Sim5TestCommonCode.NOP();
+        instMemory[61] = Sim5TestCommonCode.NOP();
+        instMemory[62] = Sim5TestCommonCode.SYSCALL();
+
+        // print_char('\n')
+        instMemory[63] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 11);
+        instMemory[64] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.REG_ZERO(), 0xa);
+        instMemory[65] = Sim5TestCommonCode.NOP();
+        instMemory[66] = Sim5TestCommonCode.NOP();
+        instMemory[67] = Sim5TestCommonCode.SYSCALL();
+
+        // print_int(s2)
+        instMemory[68] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 1);
+        instMemory[69] = Sim5TestCommonCode.ADD(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.S_REG(2), Sim5TestCommonCode.REG_ZERO());
+        instMemory[70] = Sim5TestCommonCode.NOP();
+        instMemory[71] = Sim5TestCommonCode.NOP();
+        instMemory[72] = Sim5TestCommonCode.SYSCALL();
+
+        // print_char('\n')
+        instMemory[73] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 11);
+        instMemory[74] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.REG_ZERO(), 0xa);
+        instMemory[75] = Sim5TestCommonCode.NOP();
+        instMemory[76] = Sim5TestCommonCode.NOP();
+        instMemory[77] = Sim5TestCommonCode.SYSCALL();
+
+        // print_int(s3)
+        instMemory[78] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 1);
+        instMemory[79] = Sim5TestCommonCode.ADD(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.S_REG(3), Sim5TestCommonCode.REG_ZERO());
+        instMemory[80] = Sim5TestCommonCode.NOP();
+        instMemory[81] = Sim5TestCommonCode.NOP();
+        instMemory[82] = Sim5TestCommonCode.SYSCALL();
+
+        // print_char('\n')
+        instMemory[83] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 11);
+        instMemory[84] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.REG_ZERO(), 0xa);
+        instMemory[85] = Sim5TestCommonCode.NOP();
+        instMemory[86] = Sim5TestCommonCode.NOP();
+        instMemory[87] = Sim5TestCommonCode.SYSCALL();
+
+        // exit()
+        instMemory[88] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 10);
+        instMemory[89] = Sim5TestCommonCode.NOP();
+        instMemory[90] = Sim5TestCommonCode.NOP();
+        instMemory[91] = Sim5TestCommonCode.SYSCALL();
+
+        // Execute the processor
+        Sim5TestCommonCode.ExecProcessor(instMemory, CODE_SIZE,
+                                       regs,
+                                       dataMemory, DATA_SIZE,
+                                       codeOffset);
+    }
+}
\ No newline at end of file
Index: ../Sim5/src/InstructionFields.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Sim5/src/InstructionFields.java b/../Sim5/src/InstructionFields.java
new file mode 100644
--- /dev/null	(date 1744661109408)
+++ b/../Sim5/src/InstructionFields.java	(date 1744661109408)
@@ -0,0 +1,25 @@
+// InstructionFields.java
+public class InstructionFields {
+    public int opcode;
+    public int rs;
+    public int rt;
+    public int rd;
+    public int shamt;
+    public int funct;
+    public int imm16;
+    public int imm32;
+    public int address;
+
+    // Constructor to initialize fields
+    public InstructionFields() {
+        opcode = 0;
+        rs = 0;
+        rt = 0;
+        rd = 0;
+        shamt = 0;
+        funct = 0;
+        imm16 = 0;
+        imm32 = 0;
+        address = 0;
+    }
+}
\ No newline at end of file
Index: ../Sim5/src/MEM_WB.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Sim5/src/MEM_WB.java b/../Sim5/src/MEM_WB.java
new file mode 100644
--- /dev/null	(date 1744661109408)
+++ b/../Sim5/src/MEM_WB.java	(date 1744661109408)
@@ -0,0 +1,21 @@
+// MEM_WB.java
+public class MEM_WB {
+    public int memToReg;
+    public int aluResult;
+    public int memResult;
+    public int writeReg;
+    public int regWrite;
+    public int extra1, extra2, extra3;
+
+    // Constructor to initialize fields
+    public MEM_WB() {
+        memToReg = 0;
+        aluResult = 0;
+        memResult = 0;
+        writeReg = 0;
+        regWrite = 0;
+        extra1 = 0;
+        extra2 = 0;
+        extra3 = 0;
+    }
+}
\ No newline at end of file
Index: ../Sim5/src/Test13MultipleInstructions1NoDebug.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Sim5/src/Test13MultipleInstructions1NoDebug.java b/../Sim5/src/Test13MultipleInstructions1NoDebug.java
new file mode 100644
--- /dev/null	(date 1744661109409)
+++ b/../Sim5/src/Test13MultipleInstructions1NoDebug.java	(date 1744661109409)
@@ -0,0 +1,67 @@
+public class Test13MultipleInstructions1NoDebug {
+    public static void main(String[] args) {
+        final int CODE_SIZE = 16 * 1024;
+        final int DATA_SIZE = 16 * 1024;
+        int[] regs = new int[34];
+        int[] instMemory = new int[CODE_SIZE];
+        int[] dataMemory = new int[DATA_SIZE];
+
+        // Initialize registers and data memory
+        for (int i = 0; i < 34; i++) {
+            regs[i] = 0x01010101 * i;
+        }
+        for (int i = 0; i < dataMemory.length; i++) {
+            dataMemory[i] = 0xffff0000 + (i * 4);
+        }
+
+        int codeOffset = 0x12340000;
+
+        // Initialize instructions
+        // init
+        instMemory[0] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.T_REG(0), Sim5TestCommonCode.REG_ZERO(), 0);
+        instMemory[1] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.T_REG(1), Sim5TestCommonCode.REG_ZERO(), 10);
+        instMemory[2] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.T_REG(2), Sim5TestCommonCode.REG_ZERO(), 5);
+        instMemory[3] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.T_REG(4), Sim5TestCommonCode.REG_ZERO(), 3);
+
+        // RANGE_LOOP:
+        instMemory[4] = Sim5TestCommonCode.SLT(Sim5TestCommonCode.T_REG(3), Sim5TestCommonCode.T_REG(0), Sim5TestCommonCode.T_REG(2));
+        instMemory[5] = Sim5TestCommonCode.NOP();
+        instMemory[6] = Sim5TestCommonCode.NOP();
+        instMemory[7] = Sim5TestCommonCode.BEQ(Sim5TestCommonCode.T_REG(3), Sim5TestCommonCode.REG_ZERO(), 13);
+
+        // num += step
+        instMemory[8] = Sim5TestCommonCode.ADD(Sim5TestCommonCode.T_REG(1), Sim5TestCommonCode.T_REG(1), Sim5TestCommonCode.T_REG(4));
+
+        // print_int(num)
+        instMemory[9] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 1);
+        instMemory[10] = Sim5TestCommonCode.ADD(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.T_REG(1), Sim5TestCommonCode.REG_ZERO());
+        instMemory[11] = Sim5TestCommonCode.NOP();
+        instMemory[12] = Sim5TestCommonCode.NOP();
+        instMemory[13] = Sim5TestCommonCode.SYSCALL();
+
+        // print_char('\n')
+        instMemory[14] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 11);
+        instMemory[15] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.REG_ZERO(), 0xa);
+        instMemory[16] = Sim5TestCommonCode.NOP();
+        instMemory[17] = Sim5TestCommonCode.NOP();
+        instMemory[18] = Sim5TestCommonCode.SYSCALL();
+
+        // i++
+        instMemory[19] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.T_REG(0), Sim5TestCommonCode.T_REG(0), 1);
+
+        // j RANGE_LOOP
+        instMemory[20] = Sim5TestCommonCode.J(0x08d0004);
+
+        // RANGE_LOOP_END
+        instMemory[21] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 10);
+        instMemory[22] = Sim5TestCommonCode.NOP();
+        instMemory[23] = Sim5TestCommonCode.NOP();
+        instMemory[24] = Sim5TestCommonCode.SYSCALL();
+
+        // Run the processor simulation without debug output
+        Sim5TestCommonCode.ExecProcessor(instMemory, CODE_SIZE,
+                regs,
+                dataMemory, DATA_SIZE,
+                codeOffset);
+    }
+}
\ No newline at end of file
Index: ../Sim5/src/Test15XOR.out
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Sim5/src/Test15XOR.out b/../Sim5/src/Test15XOR.out
new file mode 100644
--- /dev/null	(date 1744661109409)
+++ b/../Sim5/src/Test15XOR.out	(date 1744661109409)
@@ -0,0 +1,9 @@
+1234
+5678
+1111
+2222
+4860
+3321
+4729
+3196
+--- syscall 10 executed: Normal termination of the assembly language program.
Index: ../Sim5/src/Sim5TestCommonCode.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Sim5/src/Sim5TestCommonCode.java b/../Sim5/src/Sim5TestCommonCode.java
new file mode 100644
--- /dev/null	(date 1744661109408)
+++ b/../Sim5/src/Sim5TestCommonCode.java	(date 1744661109408)
@@ -0,0 +1,667 @@
+import java.lang.reflect.Field;
+import java.util.Arrays;
+
+public class Sim5TestCommonCode {
+    // Register macros
+    public static int S_REG(int x) { return x + 16; }
+    public static int T_REG(int x) { return (x < 8) ? (x + 8) : (x - 8 + 24); }
+    public static int A_REG(int x) { return x + 4; }
+    public static int V_REG(int x) { return x + 2; }
+    public static final int RA_REG = 31;
+    public static final int SP_REG = 29;
+    public static final int FP_REG = 30;
+    public static int REG_ZERO() { return 0; };
+
+    // Instruction format macros
+    public static int R_FORMAT(int funct, int rs, int rt, int rd, int shamt) {
+        return R_FORMAT_x(0x00, funct, rs, rt, rd, shamt);
+    }
+
+    public static int R_FORMAT_x(int opcode, int funct, int rs, int rt, int rd, int shamt) {
+        return (opcode << 26) |
+               ((rs & 0x1f) << 21) |
+               ((rt & 0x1f) << 16) |
+               ((rd & 0x1f) << 11) |
+               ((shamt & 0x1f) << 6) |
+               (funct & 0x3f);
+    }
+
+    public static int I_FORMAT(int opcode, int rs, int rt, int imm16) {
+        return ((opcode & 0x3f) << 26) |
+               ((rs & 0x1f) << 21) |
+               ((rt & 0x1f) << 16) |
+               (imm16 & 0xffff);
+    }
+
+    public static int J_FORMAT(int opcode, int addr26) {
+        return ((opcode & 0x3f) << 26) |
+               (addr26 & 0x3ffffff);
+    }
+
+    // Instruction macros
+    public static int NOP() { return 0; }
+    public static int ADD(int rd, int rs, int rt) { return R_FORMAT(32, rs, rt, rd, 0); }
+    public static int ADDU(int rd, int rs, int rt) { return R_FORMAT(33, rs, rt, rd, 0); }
+    public static int SUB(int rd, int rs, int rt) { return R_FORMAT(34, rs, rt, rd, 0); }
+    public static int SUBU(int rd, int rs, int rt) { return R_FORMAT(35, rs, rt, rd, 0); }
+    public static int ADDI(int rt, int rs, int imm16) { return I_FORMAT(8, rs, rt, imm16); }
+    public static int ADDIU(int rt, int rs, int imm16) { return I_FORMAT(9, rs, rt, imm16); }
+    public static int MUL(int rd, int rs, int rt) { return R_FORMAT_x(0x1c, 2, rs, rt, rd, 0); }
+    public static int MULT(int rs, int rt) { return R_FORMAT(24, rs, rt, 0, 0); }
+    public static int MULTU(int rs, int rt) { return R_FORMAT(25, rs, rt, 0, 0); }
+    public static int DIV(int rs, int rt) { return R_FORMAT(26, rs, rt, 0, 0); }
+    public static int DIVU(int rs, int rt) { return R_FORMAT(27, rs, rt, 0, 0); }
+    public static int MFHI(int rd) { return R_FORMAT(16, 0, 0, rd, 0); }
+    public static int MFLO(int rd) { return R_FORMAT(18, 0, 0, rd, 0); }
+    public static int AND(int rd, int rs, int rt) { return R_FORMAT(36, rs, rt, rd, 0); }
+    public static int OR(int rd, int rs, int rt) { return R_FORMAT(37, rs, rt, rd, 0); }
+    public static int XOR(int rd, int rs, int rt) { return R_FORMAT(38, rs, rt, rd, 0); }
+    public static int NOR(int rd, int rs, int rt) { return R_FORMAT(39, rs, rt, rd, 0); }
+    public static int ANDI(int rt, int rs, int imm16) { return I_FORMAT(12, rs, rt, imm16); }
+    public static int ORI(int rt, int rs, int imm16) { return I_FORMAT(13, rs, rt, imm16); }
+    public static int LUI(int rt, int imm16) { return I_FORMAT(15, 0, rt, imm16); }
+    public static int SLT(int rd, int rs, int rt) { return R_FORMAT(42, rs, rt, rd, 0); }
+    public static int SLTU(int rd, int rs, int rt) { return R_FORMAT(43, rs, rt, rd, 0); }
+    public static int SLTI(int rt, int rs, int imm16) { return I_FORMAT(10, rs, rt, imm16); }
+    public static int SLTIU(int rt, int rs, int imm16) { return I_FORMAT(11, rs, rt, imm16); }
+    public static int SLL(int rd, int rt, int shamt) { return R_FORMAT(0, 0, rt, rd, shamt); }
+    public static int SRL(int rd, int rt, int shamt) { return R_FORMAT(2, 0, rt, rd, shamt); }
+    public static int SRA(int rd, int rt, int shamt) { return R_FORMAT(3, 0, rt, rd, shamt); }
+    public static int SLLV(int rd, int rt, int rs) { return R_FORMAT(4, rs, rt, rd, 0); }
+    public static int SRLV(int rd, int rt, int rs) { return R_FORMAT(6, rs, rt, rd, 0); }
+    public static int SRAV(int rd, int rt, int rs) { return R_FORMAT(7, rs, rt, rd, 0); }
+    public static int LW(int rt, int rs, int imm16) { return I_FORMAT(35, rs, rt, imm16); }
+    public static int SW(int rt, int rs, int imm16) { return I_FORMAT(43, rs, rt, imm16); }
+    public static int LB(int rt, int rs, int imm16) { return I_FORMAT(32, rs, rt, imm16); }
+    public static int SB(int rt, int rs, int imm16) { return I_FORMAT(40, rs, rt, imm16); }
+    public static int BEQ(int rs, int rt, int imm16) { return I_FORMAT(4, rs, rt, imm16); }
+    public static int BNE(int rs, int rt, int imm16) { return I_FORMAT(5, rs, rt, imm16); }
+    public static int J(int address) { return J_FORMAT(2, address); }
+    public static int JAL(int address) { return J_FORMAT(3, address); }
+    public static int JR(int rs) { return R_FORMAT(8, rs, 0, 0, 0); }
+    public static int SYSCALL() { return R_FORMAT(12, 0, 0, 0, 0); }
+
+    // Helper method to perform deep copy of objects
+    private static void copyFields(Object src, Object dest) {
+        if (src == null || dest == null) return;
+
+        try {
+            Class<?> clazz = src.getClass();
+            while (clazz != null && clazz != Object.class) {
+                for (Field field : clazz.getDeclaredFields()) {
+                    field.setAccessible(true);
+                    Object value = field.get(src);
+
+                    if (value == null || field.getType().isPrimitive()) {
+                        field.set(dest, value);
+                    }
+                    else if (value.getClass().isArray()) {
+                        field.set(dest, copyArray(value));
+                    }
+                    else if (value instanceof ID_EX || value instanceof EX_MEM || value instanceof MEM_WB || value instanceof ID_EX.ALUControl) {
+                        field.set(dest, createCopy(value));
+                    }
+                    else {
+                        field.set(dest, value);
+                    }
+                }
+                clazz = clazz.getSuperclass();
+            }
+        } catch (Exception e) {
+            throw new RuntimeException("Failed to copy fields", e);
+        }
+    }
+
+    private static Object createCopy(Object original) {
+        try {
+            if (original == null) return null;
+            Class<?> clazz = original.getClass();
+            Object copy = clazz.getDeclaredConstructor().newInstance();
+            copyFields(original, copy);
+            return copy;
+        } catch (Exception e) {
+            throw new RuntimeException("Failed to create copy of " + original.getClass().getSimpleName(), e);
+        }
+    }
+
+    private static Object copyArray(Object array) {
+        if (array == null) return null;
+        if (array instanceof int[]) return ((int[]) array).clone();
+        if (array instanceof byte[]) return ((byte[]) array).clone();
+        if (array instanceof Object[]) return ((Object[]) array).clone();
+        throw new IllegalArgumentException("Unsupported array type: " + array.getClass());
+    }
+
+    private static boolean compareFields(Object obj1, Object obj2) {
+        if (obj1 == obj2) return true;
+        if (obj1 == null || obj2 == null) return false;
+
+        try {
+            Class<?> clazz = obj1.getClass();
+            while (clazz != null && clazz != Object.class) {
+                for (Field field : clazz.getDeclaredFields()) {
+                    field.setAccessible(true);
+                    Object val1 = field.get(obj1);
+                    Object val2 = field.get(obj2);
+
+                    if (val1 == null && val2 == null) continue;
+                    if (val1 == null || val2 == null) return false;
+
+                    if (val1.getClass().isArray() && val2.getClass().isArray()) {
+                        if (!arraysEqual(val1, val2)) return false;
+                    }
+                    else if (!val1.equals(val2)) {
+                        return false;
+                    }
+                }
+                clazz = clazz.getSuperclass();
+            }
+            return true;
+        } catch (Exception e) {
+            throw new RuntimeException("Failed to compare fields", e);
+        }
+    }
+
+    private static boolean arraysEqual(Object array1, Object array2) {
+        if (array1 == array2) return true;
+        if (array1 == null || array2 == null) return false;
+        if (array1.getClass() != array2.getClass()) return false;
+
+        if (array1 instanceof int[]) return Arrays.equals((int[]) array1, (int[]) array2);
+        if (array1 instanceof byte[]) return Arrays.equals((byte[]) array1, (byte[]) array2);
+        if (array1 instanceof Object[]) return Arrays.deepEquals((Object[]) array1, (Object[]) array2);
+        return false;
+    }
+
+    public static int Test_ID(int pcPlus4, int instruction, int[] regs,
+                            ID_EX out, ID_EX old_idex, EX_MEM old_exmem) {
+        int[] regs_save = regs.clone();
+        InstructionFields fields = new InstructionFields();
+
+        // Initialize out with default values
+        copyFields(new ID_EX(), out);
+
+        // Provide NOP if old values not provided
+        ID_EX nop_idex = new ID_EX();
+        EX_MEM nop_exmem = new EX_MEM();
+        if (old_idex == null) old_idex = nop_idex;
+        if (old_exmem == null) old_exmem = nop_exmem;
+
+        ID_EX old_idex_save = new ID_EX();
+        copyFields(old_idex, old_idex_save);
+        EX_MEM old_exmem_save = new EX_MEM();
+        copyFields(old_exmem, old_exmem_save);
+
+        System.out.printf("Before extract_instructionFields(): pc+4=0x%04x_%04x instruction=0x%04x_%04x\n",
+                (pcPlus4 >> 16) & 0xffff, pcPlus4 & 0xffff,
+                (instruction >> 16) & 0xffff, instruction & 0xffff);
+
+        Sim5.extractInstructionFields(instruction, fields);
+
+        InstructionFields fields_save = new InstructionFields();
+        copyFields(fields, fields_save);
+
+        System.out.println("  fields.opcode = " + fields.opcode);
+        System.out.println("  fields.rs     = " + fields.rs);
+        System.out.println("  fields.rt     = " + fields.rt);
+        System.out.println("  fields.rd     = " + fields.rd);
+        System.out.println("  fields.shamt  = " + fields.shamt);
+        System.out.println("  fields.funct  = " + fields.funct);
+        System.out.printf("  fields.imm16  = 0x%04x_%04x\n",
+                (fields.imm16 >> 16) & 0xffff, fields.imm16 & 0xffff);
+        System.out.printf("  fields.imm32  = 0x%04x_%04x\n",
+                (fields.imm32 >> 16) & 0xffff, fields.imm32 & 0xffff);
+        System.out.printf("  fields.address  = 0x%04x_%04x\n",
+                (fields.address >> 16) & 0xffff, fields.address & 0xffff);
+
+        System.out.println("  ---");
+
+        int stall = Sim5.IDtoIF_get_stall(fields, old_idex, old_exmem);
+        System.out.println("  IDtoIF_get_stall = " + stall);
+
+        int rsVal = regs[fields.rs];
+        int rtVal = regs[fields.rt];
+        int branchControl = Sim5.IDtoIF_get_branchControl(fields, rsVal, rtVal);
+        System.out.println("  IDtoIF_get_branchControl = " + branchControl);
+
+        int jumpAddr = Sim5.calc_jumpAddr(pcPlus4, fields);
+        int branchAddr = Sim5.calc_branchAddr(pcPlus4, fields);
+        System.out.printf("  jumpAddr   = 0x%04x_%04x\n",
+                (jumpAddr >> 16) & 0xffff, jumpAddr & 0xffff);
+        System.out.printf("  branchAddr = 0x%04x_%04x\n",
+                (branchAddr >> 16) & 0xffff, branchAddr & 0xffff);
+
+        System.out.println("  ---");
+
+        int rc = Sim5.execute_ID(stall, fields, pcPlus4, rsVal, rtVal, out);
+
+        if (!compareFields(fields, fields_save)) {
+            System.out.println("ERROR: execute_ID() modified the Fields struct outside of extract_instructionFields().");
+        }
+
+        if (!compareFields(old_idex, old_idex_save)) {
+            System.out.println("ERROR: execute_ID() modified the (old) ID_EX struct.");
+        }
+
+        if (rc == 0) {
+            System.out.println("  execute_ID() returned " + rc);
+            return rc;
+        }
+
+        System.out.println("  ID_EX.rs = " + out.rs);
+        System.out.println("  ID_EX.rt = " + out.rt);
+        System.out.println("  ID_EX.rd = " + out.rd);
+        System.out.println("  ---");
+        System.out.printf("  ID_EX.rsVal = 0x%04x_%04x\n",
+                (out.rsVal >> 16) & 0xffff, out.rsVal & 0xffff);
+        System.out.printf("  ID_EX.rtVal = 0x%04x_%04x\n",
+                (out.rtVal >> 16) & 0xffff, out.rtVal & 0xffff);
+        System.out.println("  ---");
+        System.out.println("  ID_EX.ALUsrc      = " + out.ALUsrc);
+        System.out.println("  ID_EX.ALU.bNegate = " + out.ALU.bNegate);
+        System.out.println("  ID_EX.ALU.op      = " + out.ALU.op);
+        System.out.println("  ---");
+        System.out.println("  ID_EX.memRead  = " + out.memRead);
+        System.out.println("  ID_EX.memWrite = " + out.memWrite);
+        System.out.println("  ID_EX.memToReg = " + out.memToReg);
+        System.out.println("  ---");
+        System.out.println("  ID_EX.regDst   = " + out.regDst);
+        System.out.println("  ID_EX.regWrite = " + out.regWrite);
+        System.out.println();
+
+        return rc;
+    }
+
+    public static void Test_EX(ID_EX in, EX_MEM out, EX_MEM old_exMem, MEM_WB old_memWb) {
+        ID_EX in_save = new ID_EX();
+        copyFields(in, in_save);
+
+        // Initialize out with default values
+        copyFields(new EX_MEM(), out);
+
+        // Provide NOP if old values not provided
+        EX_MEM nop_exMem = new EX_MEM();
+        MEM_WB nop_memWb = new MEM_WB();
+        if (old_exMem == null) old_exMem = nop_exMem;
+        if (old_memWb == null) old_memWb = nop_memWb;
+
+        EX_MEM old_exMem_save = new EX_MEM();
+        copyFields(old_exMem, old_exMem_save);
+        MEM_WB old_memWb_save = new MEM_WB();
+        copyFields(old_memWb, old_memWb_save);
+
+        int input1 = Sim5.EX_getALUinput1(in, old_exMem, old_memWb);
+        int input2 = Sim5.EX_getALUinput2(in, old_exMem, old_memWb);
+        System.out.printf("  ALU input1 = 0x%04x_%04x\n",
+                (input1 >> 16) & 0xffff, input1 & 0xffff);
+        System.out.printf("  ALU input2 = 0x%04x_%04x\n",
+                (input2 >> 16) & 0xffff, input2 & 0xffff);
+
+        Sim5.execute_EX(in, input1, input2, out);
+
+        if (!compareFields(in, in_save)) {
+            System.out.println("ERROR: execute_EX() modified the (old) ID_EX struct.");
+        }
+        if (!compareFields(old_exMem, old_exMem_save)) {
+            System.out.println("ERROR: execute_EX() modified the (old) EX_MEM struct.");
+        }
+        if (!compareFields(old_memWb, old_memWb_save)) {
+            System.out.println("ERROR: execute_EX() modified the (old) MEM_WB struct.");
+        }
+
+        System.out.println("  ---");
+        System.out.println("  EX_MEM.rt = " + out.rt);
+        System.out.printf("  EX_MEM.rtVal = 0x%04x_%04x\n",
+                (out.rtVal >> 16) & 0xffff, out.rtVal & 0xffff);
+        System.out.println("  ---");
+        System.out.println("  EX_MEM.memRead  = " + out.memRead);
+        System.out.println("  EX_MEM.memWrite = " + out.memWrite);
+        System.out.println("  EX_MEM.memToReg = " + out.memToReg);
+        System.out.println("  ---");
+        System.out.println("  EX_MEM.writeReg = " + out.writeReg);
+        System.out.println("  EX_MEM.regWrite = " + out.regWrite);
+        System.out.println("  ---");
+        System.out.printf("  EX_MEM.aluResult = 0x%04x_%04x\n",
+                (out.aluResult >> 16) & 0xffff, out.aluResult & 0xffff);
+        System.out.println();
+    }
+
+    public static void Test_MEM(EX_MEM in, MEM_WB old_memWb,
+                              int[] mem, int memSizeWords, MEM_WB out) {
+        // Initialize out with default values
+        copyFields(new MEM_WB(), out);
+
+        // Provide NOP if old MEM/WB not provided
+        MEM_WB nop_memWb = new MEM_WB();
+        if (old_memWb == null) old_memWb = nop_memWb;
+
+        EX_MEM in_save = new EX_MEM();
+        copyFields(in, in_save);
+        MEM_WB old_memWb_save = new MEM_WB();
+        copyFields(old_memWb, old_memWb_save);
+
+        int[] mem_save = mem.clone();
+
+        Sim5.execute_MEM(in, old_memWb, mem, out);
+
+        if (!compareFields(in, in_save)) {
+            System.out.println("ERROR: execute_MEM() modified the (old) EX_MEM struct.");
+        }
+        if (!compareFields(old_memWb, old_memWb_save)) {
+            System.out.println("ERROR: execute_MEM() modified the (old) MEM_WB struct.");
+        }
+
+        for (int i = 0; i < memSizeWords; i++) {
+            if (mem[i] != mem_save[i]) {
+                int addr = i * 4;
+                System.out.printf("  MEM CHANGED: Address=0x%04x_%04x   Was: 0x%04x_%04x Now: 0x%04x_%04x\n",
+                        (addr >> 16) & 0xffff, addr & 0xffff,
+                        (mem_save[i] >> 16) & 0xffff, mem_save[i] & 0xffff,
+                        (mem[i] >> 16) & 0xffff, mem[i] & 0xffff);
+                System.out.println();
+            }
+        }
+
+        System.out.println("  MEM_WB.memToReg  = " + out.memToReg);
+        System.out.printf("  MEM_WB.aluResult = 0x%04x_%04x\n",
+                (out.aluResult >> 16) & 0xffff, out.aluResult & 0xffff);
+        System.out.printf("  MEM_WB.memResult = 0x%04x_%04x\n",
+                (out.memResult >> 16) & 0xffff, out.memResult & 0xffff);
+        System.out.println("  ---");
+        System.out.println("  MEM_WB.writeReg = " + out.writeReg);
+        System.out.println("  MEM_WB.regWrite = " + out.regWrite);
+        System.out.println();
+    }
+
+    public static void Test_WB(MEM_WB in, int[] regs) {
+        MEM_WB in_save = new MEM_WB();
+        copyFields(in, in_save);
+
+        int[] regs_save = regs.clone();
+
+        Sim5.execute_WB(in, regs);
+
+        if (!compareFields(in, in_save)) {
+            System.out.println("ERROR: execute_WB() modified the (old) MEM_WB struct.");
+        }
+
+        int count = 0;
+        for (int i = 0; i < 34; i++) {
+            if (regs[i] != regs_save[i]) {
+                count++;
+                System.out.printf("  REGISTER %d CHANGED.  Was: 0x%04x_%04x Now: 0x%04x_%04x\n",
+                        i,
+                        (regs_save[i] >> 16) & 0xffff, regs_save[i] & 0xffff,
+                        (regs[i] >> 16) & 0xffff, regs[i] & 0xffff);
+            }
+        }
+
+        System.out.println("  A total of " + count + " registers were changed.");
+        System.out.println();
+    }
+
+    public static void Test_Pipelined_FixedSequence(int[] instructions, int[] pcs, int instCount,
+                                                  int[] regs, int[] dataMemory, int dataMemorySizeWords) {
+        ID_EX[] idex = { new ID_EX(), new ID_EX() };
+        EX_MEM[] exmem = { new EX_MEM(), new EX_MEM() };
+        MEM_WB[] memwb = { new MEM_WB(), new MEM_WB() };
+
+        System.out.println("+-----------------------------------------------+");
+        System.out.println("| Initializing the EX, MEM, WB phases to NOP... |");
+        System.out.println("+-----------------------------------------------+");
+        System.out.println();
+
+        for (int i = 0; i < instCount; i++) {
+            System.out.println("-------------- Clock " + i + " ---------------");
+            System.out.println("WB phase:");
+            Test_WB(memwb[0], regs);
+
+            System.out.println("ID phase:");
+            Test_ID(pcs[i], instructions[i], regs, idex[1], idex[0], exmem[0]);
+
+            System.out.println("EX phase:");
+            Test_EX(idex[0], exmem[1], exmem[0], memwb[0]);
+
+            System.out.println("MEM phase:");
+            Test_MEM(exmem[0], memwb[0], dataMemory, dataMemorySizeWords, memwb[1]);
+
+            copyFields(idex[1], idex[0]);
+            copyFields(exmem[1], exmem[0]);
+            copyFields(memwb[1], memwb[0]);
+        }
+    }
+
+    public static void Test_FullProcessor(int[] instMemory, int instMemSizeWords,
+                                        int[] regs, int[] dataMemory, int dataMemSizeWords,
+                                        int codeOffset) {
+        int[] instructions = new int[2];
+        int[] pcs = new int[2];
+        ID_EX[] idex = { new ID_EX(), new ID_EX() };
+        EX_MEM[] exmem = { new EX_MEM(), new EX_MEM() };
+        MEM_WB[] memwb = { new MEM_WB(), new MEM_WB() };
+
+        pcs[0] = codeOffset;
+        instructions[0] = instMemory[0];
+
+        int clock = 0;
+        while (true) {
+            System.out.println("-------------- Clock " + clock + " ---------------");
+            System.out.println("WB phase:");
+            Test_WB(memwb[0], regs);
+
+            System.out.println("ID phase:");
+
+            int stall, branchControl;
+            int rsVal = 0, rtVal;
+            int branchAddr = 0, jumpAddr = 0;
+
+            if (instructions[0] == SYSCALL()) {
+                if (execSyscall(regs, dataMemory) != 0) {
+                    return;
+                }
+
+                stall = 0;
+                branchControl = 0;
+                idex[1] = new ID_EX();
+            } else {
+                InstructionFields fields = new InstructionFields();
+                Sim5.extractInstructionFields(instructions[0], fields);
+
+                stall = Sim5.IDtoIF_get_stall(fields, idex[0], exmem[0]);
+                rsVal = regs[fields.rs];
+                rtVal = regs[fields.rt];
+                branchControl = Sim5.IDtoIF_get_branchControl(fields, rsVal, rtVal);
+                branchAddr = Sim5.calc_branchAddr(pcs[0] + 4, fields);
+                jumpAddr = Sim5.calc_jumpAddr(pcs[0] + 4, fields);
+
+                int rc = Test_ID(pcs[0] + 4, instructions[0], regs, idex[1], idex[0], exmem[0]);
+                if (rc == 0) {
+                    System.out.println("Test_FullProcessor(): Ending program because execute_ID() returned " + rc);
+                    return;
+                }
+            }
+
+            if (stall != 0) {
+                instructions[1] = instructions[0];
+                pcs[1] = pcs[0];
+            } else {
+                if (branchControl == 1) {
+                    pcs[1] = branchAddr;
+                } else if (branchControl == 2) {
+                    pcs[1] = jumpAddr;
+                } else if (branchControl == 3) {
+                    pcs[1] = rsVal;
+                } else {
+                    pcs[1] = pcs[0] + 4;
+                }
+
+                int instIndx = (pcs[1] - codeOffset) / 4;
+
+                if (instIndx < 0 || instIndx >= instMemSizeWords || pcs[1] % 4 != 0) {
+                    System.out.println("ERROR: Invalid Program Counter 0x" + Integer.toHexString(pcs[0]));
+                    return;
+                }
+
+                instructions[1] = instMemory[instIndx];
+            }
+
+            System.out.println("EX phase:");
+            Test_EX(idex[0], exmem[1], exmem[0], memwb[0]);
+
+            System.out.println("MEM phase:");
+            Test_MEM(exmem[0], memwb[0], dataMemory, dataMemSizeWords, memwb[1]);
+
+            instructions[0] = instructions[1];
+            pcs[0] = pcs[1];
+            copyFields(idex[1], idex[0]);
+            copyFields(exmem[1], exmem[0]);
+            copyFields(memwb[1], memwb[0]);
+
+            clock++;
+        }
+    }
+
+    public static void ExecProcessor(int[] instMemory, int instMemSizeWords,
+                                   int[] regs, int[] dataMemory, int dataMemSizeWords,
+                                   int codeOffset) {
+        int[] instructions = new int[2];
+        int[] pcs = new int[2];
+        ID_EX[] idex = { new ID_EX(), new ID_EX() };
+        EX_MEM[] exmem = { new EX_MEM(), new EX_MEM() };
+        MEM_WB[] memwb = { new MEM_WB(), new MEM_WB() };
+
+        pcs[0] = codeOffset;
+        instructions[0] = instMemory[0];
+
+        while (true) {
+            Sim5.execute_WB(memwb[0], regs);
+
+            int stall, branchControl;
+            int rsVal = 0, rtVal;
+            int branchAddr = 0, jumpAddr = 0;
+
+            if (instructions[0] == SYSCALL()) {
+                if (execSyscall(regs, dataMemory) != 0) {
+                    return;
+                }
+
+                stall = 0;
+                branchControl = 0;
+                idex[1] = new ID_EX();
+            } else {
+                InstructionFields fields = new InstructionFields();
+                Sim5.extractInstructionFields(instructions[0], fields);
+
+                stall = Sim5.IDtoIF_get_stall(fields, idex[0], exmem[0]);
+                rsVal = regs[fields.rs];
+                rtVal = regs[fields.rt];
+                branchControl = Sim5.IDtoIF_get_branchControl(fields, rsVal, rtVal);
+                branchAddr = Sim5.calc_branchAddr(pcs[0] + 4, fields);
+                jumpAddr = Sim5.calc_jumpAddr(pcs[0] + 4, fields);
+
+                int rc = Sim5.execute_ID(stall, fields, pcs[0] + 4, rsVal, rtVal, idex[1]);
+                if (rc == 0) {
+                    System.out.println("ExecProcessor(): Ending program because execute_ID() returned " + rc);
+                    return;
+                }
+            }
+
+            if (stall != 0) {
+                instructions[1] = instructions[0];
+                pcs[1] = pcs[0];
+            } else {
+                if (branchControl == 1) {
+                    pcs[1] = branchAddr;
+                } else if (branchControl == 2) {
+                    pcs[1] = jumpAddr;
+                } else if (branchControl == 3) {
+                    pcs[1] = rsVal;
+                } else {
+                    pcs[1] = pcs[0] + 4;
+                }
+
+                int instIndx = (pcs[1] - codeOffset) / 4;
+
+                if (instIndx < 0 || instIndx >= instMemSizeWords || pcs[1] % 4 != 0) {
+                    System.out.println("ERROR: Invalid Program Counter 0x" + Integer.toHexString(pcs[0]));
+                    return;
+                }
+
+                instructions[1] = instMemory[instIndx];
+
+                // System.out.printf("fetched instruction %d\n", instIndx);
+            }
+
+            int aluInput1 = Sim5.EX_getALUinput1(idex[0], exmem[0], memwb[0]);
+            int aluInput2 = Sim5.EX_getALUinput2(idex[0], exmem[0], memwb[0]);
+
+            Sim5.execute_EX(idex[0], aluInput1, aluInput2, exmem[1]);
+            Sim5.execute_MEM(exmem[0], memwb[0], dataMemory, memwb[1]);
+
+            instructions[0] = instructions[1];
+            pcs[0] = pcs[1];
+            copyFields(idex[1], idex[0]);
+            copyFields(exmem[1], exmem[0]);
+            copyFields(memwb[1], memwb[0]);
+        }
+    }
+
+    public static int execSyscall(int[] regs, int[] dataMemory) {
+        int v0 = regs[2];
+        int a0 = regs[4];
+
+        // syscall 10: exit
+        if (v0 == 10) {
+            System.out.println("--- syscall 10 executed: Normal termination of the assembly language program.");
+            return 1;
+        }
+
+        // syscall 1: print_int
+        if (v0 == 1) {
+            System.out.print(a0);
+        }
+        // syscall 11: print_char
+        else if (v0 == 11) {
+            System.out.print((char)a0);
+        }
+        // syscall 4: print_str
+        else if (v0 == 4) {
+            // Direct translation of the C string printing logic
+            int addr = a0;
+            while (true) {
+                // Calculate word address and offset
+                int wordAddr = addr & ~0x3;  // Align to word boundary
+                int byteOffset = addr & 0x3;  // Byte offset within word
+
+                // Check if address is within bounds
+                if (wordAddr/4 >= dataMemory.length) {
+                    System.out.println("--- ERROR: String address out of bounds");
+                    break;
+                }
+
+                // Get the word containing the character
+                int word = dataMemory[wordAddr/4];
+
+                // Extract the specific byte (little-endian)
+                int c = (word >> (byteOffset * 8)) & 0xFF;
+
+                // Check for null terminator
+                if (c == 0) {
+                    break;
+                }
+
+                // Print the character
+                System.out.print((char)c);
+
+                // Move to next byte
+                addr++;
+            }
+        }
+        // unrecognized syscall
+        else {
+            System.out.println("--- ERROR: Unrecognized syscall $v0=" + v0);
+        }
+
+        return 0;
+    }
+}
\ No newline at end of file
Index: ../Sim5/src/Test17IDWithSWStallCheck.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Sim5/src/Test17IDWithSWStallCheck.java b/../Sim5/src/Test17IDWithSWStallCheck.java
new file mode 100644
--- /dev/null	(date 1744661109409)
+++ b/../Sim5/src/Test17IDWithSWStallCheck.java	(date 1744661109409)
@@ -0,0 +1,145 @@
+import java.util.Random;
+
+public class Test17IDWithSWStallCheck {
+
+    public static void main(String[] args) {
+        Random rand = new Random();
+        int i, j;
+
+        final int COUNT = 15;
+        int[] pcs = new int[COUNT];
+        int[] instructions = new int[COUNT + 1]; // +1 for the extra NOP at the end
+        ID_EX[] out = new ID_EX[COUNT];
+
+        // Initialize instructions
+        instructions[0] = Sim5TestCommonCode.ADD(Sim5TestCommonCode.S_REG(0), Sim5TestCommonCode.S_REG(1), Sim5TestCommonCode.S_REG(2));
+        instructions[1] = Sim5TestCommonCode.SUB(Sim5TestCommonCode.S_REG(3), Sim5TestCommonCode.S_REG(4), Sim5TestCommonCode.S_REG(5));
+        instructions[2] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.T_REG(2), Sim5TestCommonCode.T_REG(3), -1);
+        instructions[3] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.T_REG(4), Sim5TestCommonCode.T_REG(5), 16);
+        instructions[4] = Sim5TestCommonCode.ADDU(1, 0, 2);
+        instructions[5] = Sim5TestCommonCode.SUBU(3, 4, 5);
+        instructions[6] = Sim5TestCommonCode.ADDIU(6, 7, 0x1234);
+        instructions[7] = Sim5TestCommonCode.AND(9, 10, 11);
+        instructions[8] = Sim5TestCommonCode.OR(12, 13, 14);
+        instructions[9] = Sim5TestCommonCode.ANDI(15, 16, 0x5678);
+        instructions[10] = Sim5TestCommonCode.ORI(18, 19, 0x9abc);
+        instructions[11] = Sim5TestCommonCode.SLT(21, 22, 23);
+        instructions[12] = Sim5TestCommonCode.SLTI(24, 25, -1);
+        instructions[13] = Sim5TestCommonCode.LW(26, 0, 104);
+        instructions[14] = Sim5TestCommonCode.SW(29, 0, 108);
+        instructions[15] = Sim5TestCommonCode.NOP();
+
+        for (i = 0; i < 16; i++) {
+            for (j = 0; j < 16; j++) {
+                System.out.println("+-------------------------------------------+");
+                System.out.printf("| STARTING TEST i=%d j=%d\n", i, j);
+                System.out.println("+-------------------------------------------+");
+
+                int a = instructions[i];
+                int b = instructions[j];
+                System.out.printf("  instruction A: 0x%08x\n", a);
+                System.out.printf("  instruction B: 0x%08x\n", b);
+                System.out.println();
+
+                InstructionFields aFields = new InstructionFields();
+                InstructionFields bFields = new InstructionFields();
+                ID_EX aIDEX = new ID_EX();
+                ID_EX bIDEX = new ID_EX();
+                EX_MEM aEXMEM = new EX_MEM();
+
+                Sim5.extractInstructionFields(a, aFields);
+                Sim5.extractInstructionFields(b, bFields);
+
+                // Execute instruction A through ID phase
+                Sim5.execute_ID(0, aFields,
+                        rand.nextInt() & 0xfffffffc,   // PC
+                        rand.nextInt(), rand.nextInt(), // rsVal, rtVal
+                        aIDEX);
+
+                // Check for stalls in instruction B
+                if (Sim5.IDtoIF_get_stall(bFields,
+                        aIDEX,      // full
+                        aEXMEM      // stall all zeroes
+                ) != 0) {
+                    System.out.println("**** TESTCASE ERROR ****");
+                    System.out.println("This instruction pair stalled in the B instruction!!!");
+                    System.exit(1);
+                }
+
+                // Execute instruction B through ID phase
+                Sim5.execute_ID(0, bFields,
+                        rand.nextInt() & 0xfffffffc,
+                        rand.nextInt(), rand.nextInt(),
+                        bIDEX);
+
+                // Advance instruction A through EX phase
+                int alu1, alu2;
+                if (a == Sim5TestCommonCode.NOP()) {
+                    alu1 = alu2 = 0;
+                } else {
+                    alu1 = rand.nextInt();
+                    alu2 = rand.nextInt();
+                }
+
+                Sim5.execute_EX(aIDEX, alu1, alu2, aEXMEM);
+
+                System.out.println("Key pipeline registers when A is in the EX/MEM register, and B is in ID/EX:");
+                System.out.printf("  ID_EX.regWrite = %d\n", bIDEX.regWrite);
+                System.out.printf("  ID_EX.regDst   = %d\n", bIDEX.regDst);
+                System.out.printf("  ID_EX.rt       = %d\n", bIDEX.rt);
+                System.out.printf("  ID_EX.rd       = %d\n", bIDEX.rd);
+                System.out.println("  --");
+                System.out.printf("  EX_MEM.regWrite = %d\n", aEXMEM.regWrite);
+                System.out.printf("  EX_MEM.writeReg = %d\n", aEXMEM.writeReg);
+                System.out.println();
+
+                System.out.println("The testcase will perform 3 stall checks with those two instructions: match-A, match-B, and a SW-stores-zero-register test.");
+                System.out.println();
+
+                int aWriteReg = aEXMEM.writeReg;
+                int bWriteReg = (bIDEX.regDst == 0) ? bIDEX.rt : bIDEX.rd;
+
+                int sw1 = Sim5TestCommonCode.SW(aWriteReg, 0, 112);
+                int sw2 = Sim5TestCommonCode.SW(bWriteReg, 0, 116);
+                int sw3 = Sim5TestCommonCode.SW(0, 0, 120);
+
+                InstructionFields sw1_fields = new InstructionFields();
+                InstructionFields sw2_fields = new InstructionFields();
+                InstructionFields sw3_fields = new InstructionFields();
+
+                Sim5.extractInstructionFields(sw1, sw1_fields);
+                Sim5.extractInstructionFields(sw2, sw2_fields);
+                Sim5.extractInstructionFields(sw3, sw3_fields);
+
+                // Test 1 (match A)
+                if (aWriteReg == 0) {
+                    System.out.println("Skipping Test 1 for this instruction combination, because A appears to \"write\" to register zero.");
+                } else {
+                    System.out.printf("Test 1 (match A): a=0x%08x b=0x%08x sw1=0x%08x\n", a, b, sw1);
+                    System.out.printf("        stall? %d\n",
+                            Sim5.IDtoIF_get_stall(sw1_fields, bIDEX, aEXMEM));
+                }
+
+                // Test 2 (match B)
+                if (bWriteReg == 0) {
+                    System.out.println("Skipping Test 2 for this instruction combination, because B appears to \"write\" to register zero.");
+                } else {
+                    System.out.printf("Test 2 (match B): a=0x%08x b=0x%08x sw2=0x%08x\n", a, b, sw2);
+                    System.out.printf("        stall? %d\n",
+                            Sim5.IDtoIF_get_stall(sw2_fields, bIDEX, aEXMEM));
+                }
+
+                // Test 3 (SW zero)
+                if (aWriteReg == 0 || bWriteReg == 0) {
+                    System.out.println("Skipping Test 3 for this instruction combination, because either A or B appear to \"write\" to register zero.");
+                } else {
+                    System.out.printf("Test 3 (SW zero): a=0x%08x b=0x%08x sw3=0x%08x\n", a, b, sw3);
+                    System.out.printf("        stall? %d\n",
+                            Sim5.IDtoIF_get_stall(sw3_fields, bIDEX, aEXMEM));
+                }
+
+                System.out.println();
+            }
+        }
+    }
+}
\ No newline at end of file
Index: ../Sim5/src/Test15XOR.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Sim5/src/Test15XOR.java b/../Sim5/src/Test15XOR.java
new file mode 100644
--- /dev/null	(date 1744661109409)
+++ b/../Sim5/src/Test15XOR.java	(date 1744661109409)
@@ -0,0 +1,166 @@
+// Test15XOR.java
+public class Test15XOR {
+    public static void main(String[] args) {
+        final int CODE_SIZE = 16 * 1024;
+        final int DATA_SIZE = 16 * 1024;
+
+        int[] regs = new int[34];
+        int[] instMemory = new int[CODE_SIZE];
+        int[] dataMemory = new int[DATA_SIZE];
+
+        // Initialize registers and data memory
+        for (int i = 0; i < 34; i++) {
+            regs[i] = 0x01010101 * i;
+        }
+        for (int i = 0; i < dataMemory.length; i++) {
+            dataMemory[i] = 0xffff0000 + (i * 4);
+        }
+
+        int codeOffset = 0x12340000;
+
+        // Initialize instructions
+        // addi $t0, $zero, 1234
+        instMemory[0] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.T_REG(0), Sim5TestCommonCode.REG_ZERO(), 1234);
+        // addi $t1, $zero, 5678
+        instMemory[1] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.T_REG(1), Sim5TestCommonCode.REG_ZERO(), 5678);
+        // addi $t2, $zero, 1111
+        instMemory[2] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.T_REG(2), Sim5TestCommonCode.REG_ZERO(), 1111);
+        // addi $t3, $zero, 2222
+        instMemory[3] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.T_REG(3), Sim5TestCommonCode.REG_ZERO(), 2222);
+
+        // XOR instructions
+        // xor $s0, $t0,$t1
+        instMemory[4] = Sim5TestCommonCode.XOR(Sim5TestCommonCode.S_REG(0), Sim5TestCommonCode.T_REG(0), Sim5TestCommonCode.T_REG(1));
+        // xor $s1, $t2,$t3
+        instMemory[5] = Sim5TestCommonCode.XOR(Sim5TestCommonCode.S_REG(1), Sim5TestCommonCode.T_REG(2), Sim5TestCommonCode.T_REG(3));
+        // xor $s2, $t2,$t1
+        instMemory[6] = Sim5TestCommonCode.XOR(Sim5TestCommonCode.S_REG(2), Sim5TestCommonCode.T_REG(2), Sim5TestCommonCode.T_REG(1));
+        // xor $s3, $t3,$t0
+        instMemory[7] = Sim5TestCommonCode.XOR(Sim5TestCommonCode.S_REG(3), Sim5TestCommonCode.T_REG(3), Sim5TestCommonCode.T_REG(0));
+
+        // Print sequence (t0-t3, s0-s3)
+        // print_int(t0)
+        instMemory[8] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 1);
+        instMemory[9] = Sim5TestCommonCode.ADD(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.T_REG(0), Sim5TestCommonCode.REG_ZERO());
+        instMemory[10] = Sim5TestCommonCode.NOP();
+        instMemory[11] = Sim5TestCommonCode.NOP();
+        instMemory[12] = Sim5TestCommonCode.SYSCALL();
+
+        // print_char('\n')
+        instMemory[13] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 11);
+        instMemory[14] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.REG_ZERO(), 0xa);
+        instMemory[15] = Sim5TestCommonCode.NOP();
+        instMemory[16] = Sim5TestCommonCode.NOP();
+        instMemory[17] = Sim5TestCommonCode.SYSCALL();
+
+        // print_int(t1)
+        instMemory[18] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 1);
+        instMemory[19] = Sim5TestCommonCode.ADD(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.T_REG(1), Sim5TestCommonCode.REG_ZERO());
+        instMemory[20] = Sim5TestCommonCode.NOP();
+        instMemory[21] = Sim5TestCommonCode.NOP();
+        instMemory[22] = Sim5TestCommonCode.SYSCALL();
+
+        // print_char('\n')
+        instMemory[23] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 11);
+        instMemory[24] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.REG_ZERO(), 0xa);
+        instMemory[25] = Sim5TestCommonCode.NOP();
+        instMemory[26] = Sim5TestCommonCode.NOP();
+        instMemory[27] = Sim5TestCommonCode.SYSCALL();
+
+        // print_int(t2)
+        instMemory[28] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 1);
+        instMemory[29] = Sim5TestCommonCode.ADD(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.T_REG(2), Sim5TestCommonCode.REG_ZERO());
+        instMemory[30] = Sim5TestCommonCode.NOP();
+        instMemory[31] = Sim5TestCommonCode.NOP();
+        instMemory[32] = Sim5TestCommonCode.SYSCALL();
+
+        // print_char('\n')
+        instMemory[33] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 11);
+        instMemory[34] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.REG_ZERO(), 0xa);
+        instMemory[35] = Sim5TestCommonCode.NOP();
+        instMemory[36] = Sim5TestCommonCode.NOP();
+        instMemory[37] = Sim5TestCommonCode.SYSCALL();
+
+        // print_int(t3)
+        instMemory[38] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 1);
+        instMemory[39] = Sim5TestCommonCode.ADD(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.T_REG(3), Sim5TestCommonCode.REG_ZERO());
+        instMemory[40] = Sim5TestCommonCode.NOP();
+        instMemory[41] = Sim5TestCommonCode.NOP();
+        instMemory[42] = Sim5TestCommonCode.SYSCALL();
+
+        // print_char('\n')
+        instMemory[43] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 11);
+        instMemory[44] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.REG_ZERO(), 0xa);
+        instMemory[45] = Sim5TestCommonCode.NOP();
+        instMemory[46] = Sim5TestCommonCode.NOP();
+        instMemory[47] = Sim5TestCommonCode.SYSCALL();
+
+        // print_int(s0)
+        instMemory[48] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 1);
+        instMemory[49] = Sim5TestCommonCode.ADD(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.S_REG(0), Sim5TestCommonCode.REG_ZERO());
+        instMemory[50] = Sim5TestCommonCode.NOP();
+        instMemory[51] = Sim5TestCommonCode.NOP();
+        instMemory[52] = Sim5TestCommonCode.SYSCALL();
+
+        // print_char('\n')
+        instMemory[53] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 11);
+        instMemory[54] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.REG_ZERO(), 0xa);
+        instMemory[55] = Sim5TestCommonCode.NOP();
+        instMemory[56] = Sim5TestCommonCode.NOP();
+        instMemory[57] = Sim5TestCommonCode.SYSCALL();
+
+        // print_int(s1)
+        instMemory[58] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 1);
+        instMemory[59] = Sim5TestCommonCode.ADD(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.S_REG(1), Sim5TestCommonCode.REG_ZERO());
+        instMemory[60] = Sim5TestCommonCode.NOP();
+        instMemory[61] = Sim5TestCommonCode.NOP();
+        instMemory[62] = Sim5TestCommonCode.SYSCALL();
+
+        // print_char('\n')
+        instMemory[63] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 11);
+        instMemory[64] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.REG_ZERO(), 0xa);
+        instMemory[65] = Sim5TestCommonCode.NOP();
+        instMemory[66] = Sim5TestCommonCode.NOP();
+        instMemory[67] = Sim5TestCommonCode.SYSCALL();
+
+        // print_int(s2)
+        instMemory[68] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 1);
+        instMemory[69] = Sim5TestCommonCode.ADD(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.S_REG(2), Sim5TestCommonCode.REG_ZERO());
+        instMemory[70] = Sim5TestCommonCode.NOP();
+        instMemory[71] = Sim5TestCommonCode.NOP();
+        instMemory[72] = Sim5TestCommonCode.SYSCALL();
+
+        // print_char('\n')
+        instMemory[73] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 11);
+        instMemory[74] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.REG_ZERO(), 0xa);
+        instMemory[75] = Sim5TestCommonCode.NOP();
+        instMemory[76] = Sim5TestCommonCode.NOP();
+        instMemory[77] = Sim5TestCommonCode.SYSCALL();
+
+        // print_int(s3)
+        instMemory[78] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 1);
+        instMemory[79] = Sim5TestCommonCode.ADD(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.S_REG(3), Sim5TestCommonCode.REG_ZERO());
+        instMemory[80] = Sim5TestCommonCode.NOP();
+        instMemory[81] = Sim5TestCommonCode.NOP();
+        instMemory[82] = Sim5TestCommonCode.SYSCALL();
+
+        // print_char('\n')
+        instMemory[83] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 11);
+        instMemory[84] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.A_REG(0), Sim5TestCommonCode.REG_ZERO(), 0xa);
+        instMemory[85] = Sim5TestCommonCode.NOP();
+        instMemory[86] = Sim5TestCommonCode.NOP();
+        instMemory[87] = Sim5TestCommonCode.SYSCALL();
+
+        // exit()
+        instMemory[88] = Sim5TestCommonCode.ADDI(Sim5TestCommonCode.V_REG(0), Sim5TestCommonCode.REG_ZERO(), 10);
+        instMemory[89] = Sim5TestCommonCode.NOP();
+        instMemory[90] = Sim5TestCommonCode.NOP();
+        instMemory[91] = Sim5TestCommonCode.SYSCALL();
+
+        // Execute the processor
+        Sim5TestCommonCode.ExecProcessor(instMemory, CODE_SIZE,
+                                       regs,
+                                       dataMemory, DATA_SIZE,
+                                       codeOffset);
+    }
+}
\ No newline at end of file
